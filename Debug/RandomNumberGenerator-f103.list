
RandomNumberGenerator-f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003398  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080034a4  080034a4  000134a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003550  08003550  00020278  2**0
                  CONTENTS
  4 .ARM          00000000  08003550  08003550  00020278  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003550  08003550  00020278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003550  08003550  00013550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003554  08003554  00013554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000278  20000000  08003558  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004fc  20000278  080037d0  00020278  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000774  080037d0  00020774  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c1fd  00000000  00000000  000202a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002073  00000000  00000000  0002c49e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db8  00000000  00000000  0002e518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd0  00000000  00000000  0002f2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000185ee  00000000  00000000  0002ffa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eda5  00000000  00000000  0004858e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c1ee  00000000  00000000  00057333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e3521  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cac  00000000  00000000  000e3574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000278 	.word	0x20000278
 8000128:	00000000 	.word	0x00000000
 800012c:	0800348c 	.word	0x0800348c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000027c 	.word	0x2000027c
 8000148:	0800348c 	.word	0x0800348c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000162:	f107 0310 	add.w	r3, r7, #16
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]
 800016e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000170:	4b2e      	ldr	r3, [pc, #184]	; (800022c <MX_GPIO_Init+0xd0>)
 8000172:	699b      	ldr	r3, [r3, #24]
 8000174:	4a2d      	ldr	r2, [pc, #180]	; (800022c <MX_GPIO_Init+0xd0>)
 8000176:	f043 0320 	orr.w	r3, r3, #32
 800017a:	6193      	str	r3, [r2, #24]
 800017c:	4b2b      	ldr	r3, [pc, #172]	; (800022c <MX_GPIO_Init+0xd0>)
 800017e:	699b      	ldr	r3, [r3, #24]
 8000180:	f003 0320 	and.w	r3, r3, #32
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000188:	4b28      	ldr	r3, [pc, #160]	; (800022c <MX_GPIO_Init+0xd0>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a27      	ldr	r2, [pc, #156]	; (800022c <MX_GPIO_Init+0xd0>)
 800018e:	f043 0304 	orr.w	r3, r3, #4
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	4b25      	ldr	r3, [pc, #148]	; (800022c <MX_GPIO_Init+0xd0>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	f003 0304 	and.w	r3, r3, #4
 800019c:	60bb      	str	r3, [r7, #8]
 800019e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a0:	4b22      	ldr	r3, [pc, #136]	; (800022c <MX_GPIO_Init+0xd0>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a21      	ldr	r2, [pc, #132]	; (800022c <MX_GPIO_Init+0xd0>)
 80001a6:	f043 0308 	orr.w	r3, r3, #8
 80001aa:	6193      	str	r3, [r2, #24]
 80001ac:	4b1f      	ldr	r3, [pc, #124]	; (800022c <MX_GPIO_Init+0xd0>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	f003 0308 	and.w	r3, r3, #8
 80001b4:	607b      	str	r3, [r7, #4]
 80001b6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|TEST_Pin, GPIO_PIN_RESET);
 80001b8:	2200      	movs	r2, #0
 80001ba:	210a      	movs	r1, #10
 80001bc:	481c      	ldr	r0, [pc, #112]	; (8000230 <MX_GPIO_Init+0xd4>)
 80001be:	f000 ffcb 	bl	8001158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80001c2:	2302      	movs	r3, #2
 80001c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80001c6:	2311      	movs	r3, #17
 80001c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ca:	2300      	movs	r3, #0
 80001cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001ce:	2302      	movs	r3, #2
 80001d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80001d2:	f107 0310 	add.w	r3, r7, #16
 80001d6:	4619      	mov	r1, r3
 80001d8:	4815      	ldr	r0, [pc, #84]	; (8000230 <MX_GPIO_Init+0xd4>)
 80001da:	f000 fe39 	bl	8000e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RNG_Pin;
 80001de:	2304      	movs	r3, #4
 80001e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80001e2:	4b14      	ldr	r3, [pc, #80]	; (8000234 <MX_GPIO_Init+0xd8>)
 80001e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80001e6:	2302      	movs	r3, #2
 80001e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RNG_GPIO_Port, &GPIO_InitStruct);
 80001ea:	f107 0310 	add.w	r3, r7, #16
 80001ee:	4619      	mov	r1, r3
 80001f0:	480f      	ldr	r0, [pc, #60]	; (8000230 <MX_GPIO_Init+0xd4>)
 80001f2:	f000 fe2d 	bl	8000e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEST_Pin;
 80001f6:	2308      	movs	r3, #8
 80001f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001fa:	2301      	movs	r3, #1
 80001fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001fe:	2300      	movs	r3, #0
 8000200:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000202:	2303      	movs	r3, #3
 8000204:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 8000206:	f107 0310 	add.w	r3, r7, #16
 800020a:	4619      	mov	r1, r3
 800020c:	4808      	ldr	r0, [pc, #32]	; (8000230 <MX_GPIO_Init+0xd4>)
 800020e:	f000 fe1f 	bl	8000e50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000212:	2200      	movs	r2, #0
 8000214:	2100      	movs	r1, #0
 8000216:	2008      	movs	r0, #8
 8000218:	f000 fde3 	bl	8000de2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800021c:	2008      	movs	r0, #8
 800021e:	f000 fdfc 	bl	8000e1a <HAL_NVIC_EnableIRQ>

}
 8000222:	bf00      	nop
 8000224:	3720      	adds	r7, #32
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop
 800022c:	40021000 	.word	0x40021000
 8000230:	40010800 	.word	0x40010800
 8000234:	10210000 	.word	0x10210000

08000238 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b08e      	sub	sp, #56	; 0x38
 800023c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023e:	f000 fc73 	bl	8000b28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000242:	f000 f921 	bl	8000488 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000246:	f7ff ff89 	bl	800015c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800024a:	f000 fbd1 	bl	80009f0 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 800024e:	f000 faa7 	bl	80007a0 <MX_TIM3_Init>
  MX_SPI1_Init();
 8000252:	f000 f963 	bl	800051c <MX_SPI1_Init>
  MX_TIM4_Init();
 8000256:	f000 fb19 	bl	800088c <MX_TIM4_Init>
//  			soft_version_arr_int[1] ,
//  			soft_version_arr_int[2] ) ;
//  	HAL_UART_Transmit(&huart1, (uint8_t *)DataChar, strlen(DataChar), 100);
  	#define 	DATE_as_int_str 	(__DATE__)
  	#define 	TIME_as_int_str 	(__TIME__)
  	sprintf(DataChar,"\tBuild: %s. Time: %s.\r\n" ,
 800025a:	4b7b      	ldr	r3, [pc, #492]	; (8000448 <main+0x210>)
 800025c:	4a7b      	ldr	r2, [pc, #492]	; (800044c <main+0x214>)
 800025e:	497c      	ldr	r1, [pc, #496]	; (8000450 <main+0x218>)
 8000260:	487c      	ldr	r0, [pc, #496]	; (8000454 <main+0x21c>)
 8000262:	f002 fc99 	bl	8002b98 <siprintf>
  			DATE_as_int_str ,
  			TIME_as_int_str ) ;
  	HAL_UART_Transmit( &huart1, (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 8000266:	487b      	ldr	r0, [pc, #492]	; (8000454 <main+0x21c>)
 8000268:	f7ff ff70 	bl	800014c <strlen>
 800026c:	4603      	mov	r3, r0
 800026e:	b29a      	uxth	r2, r3
 8000270:	2364      	movs	r3, #100	; 0x64
 8000272:	4978      	ldr	r1, [pc, #480]	; (8000454 <main+0x21c>)
 8000274:	4878      	ldr	r0, [pc, #480]	; (8000458 <main+0x220>)
 8000276:	f002 faf2 	bl	800285e <HAL_UART_Transmit>
  	HAL_Delay(500);
 800027a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800027e:	f000 fcb5 	bl	8000bec <HAL_Delay>
  	HAL_TIM_Base_Start(&htim3);
 8000282:	4876      	ldr	r0, [pc, #472]	; (800045c <main+0x224>)
 8000284:	f001 fc90 	bl	8001ba8 <HAL_TIM_Base_Start>
  	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);	//HAL_TIM_ACTIVE_CHANNEL_1
 8000288:	2100      	movs	r1, #0
 800028a:	4874      	ldr	r0, [pc, #464]	; (800045c <main+0x224>)
 800028c:	f001 fd2e 	bl	8001cec <HAL_TIM_PWM_Start_IT>
  	HAL_TIM_Base_Start(&htim4);
 8000290:	4873      	ldr	r0, [pc, #460]	; (8000460 <main+0x228>)
 8000292:	f001 fc89 	bl	8001ba8 <HAL_TIM_Base_Start>

  	uint32_t zero = 0;
 8000296:	2300      	movs	r3, #0
 8000298:	627b      	str	r3, [r7, #36]	; 0x24
  	uint32_t odin = 0;
 800029a:	2300      	movs	r3, #0
 800029c:	623b      	str	r3, [r7, #32]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
					  //uint8_t spi_data[16] = {0};
					 // HAL_SPI_Receive(&hspi1, spi_data, 16, 1000);
	  uint32_t t_min = 300;
 800029e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80002a2:	61fb      	str	r3, [r7, #28]

  if ( circle_cnt > CRC_SIZE) {
 80002a4:	4b6f      	ldr	r3, [pc, #444]	; (8000464 <main+0x22c>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	2b80      	cmp	r3, #128	; 0x80
 80002aa:	d9f8      	bls.n	800029e <main+0x66>
		for (int y=0; y<CRC_SIZE; y++) {
 80002ac:	2300      	movs	r3, #0
 80002ae:	61bb      	str	r3, [r7, #24]
 80002b0:	e010      	b.n	80002d4 <main+0x9c>
			if 	( tmr_value[y+1] < t_min) {
 80002b2:	69bb      	ldr	r3, [r7, #24]
 80002b4:	3301      	adds	r3, #1
 80002b6:	4a6c      	ldr	r2, [pc, #432]	; (8000468 <main+0x230>)
 80002b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002bc:	69fa      	ldr	r2, [r7, #28]
 80002be:	429a      	cmp	r2, r3
 80002c0:	d905      	bls.n	80002ce <main+0x96>
				t_min = tmr_value[y+1];
 80002c2:	69bb      	ldr	r3, [r7, #24]
 80002c4:	3301      	adds	r3, #1
 80002c6:	4a68      	ldr	r2, [pc, #416]	; (8000468 <main+0x230>)
 80002c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002cc:	61fb      	str	r3, [r7, #28]
		for (int y=0; y<CRC_SIZE; y++) {
 80002ce:	69bb      	ldr	r3, [r7, #24]
 80002d0:	3301      	adds	r3, #1
 80002d2:	61bb      	str	r3, [r7, #24]
 80002d4:	69bb      	ldr	r3, [r7, #24]
 80002d6:	2b7f      	cmp	r3, #127	; 0x7f
 80002d8:	ddeb      	ble.n	80002b2 <main+0x7a>
			}
		}

		for (int y=0; y<CRC_SIZE; y++) {
 80002da:	2300      	movs	r3, #0
 80002dc:	617b      	str	r3, [r7, #20]
 80002de:	e015      	b.n	800030c <main+0xd4>
			if (tmr_value[y+1] > t_min) {
 80002e0:	697b      	ldr	r3, [r7, #20]
 80002e2:	3301      	adds	r3, #1
 80002e4:	4a60      	ldr	r2, [pc, #384]	; (8000468 <main+0x230>)
 80002e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ea:	69fa      	ldr	r2, [r7, #28]
 80002ec:	429a      	cmp	r2, r3
 80002ee:	d205      	bcs.n	80002fc <main+0xc4>
				bit[y] = 1;
 80002f0:	4a5e      	ldr	r2, [pc, #376]	; (800046c <main+0x234>)
 80002f2:	697b      	ldr	r3, [r7, #20]
 80002f4:	4413      	add	r3, r2
 80002f6:	2201      	movs	r2, #1
 80002f8:	701a      	strb	r2, [r3, #0]
 80002fa:	e004      	b.n	8000306 <main+0xce>
			} else {
				bit[y] = 0;
 80002fc:	4a5b      	ldr	r2, [pc, #364]	; (800046c <main+0x234>)
 80002fe:	697b      	ldr	r3, [r7, #20]
 8000300:	4413      	add	r3, r2
 8000302:	2200      	movs	r2, #0
 8000304:	701a      	strb	r2, [r3, #0]
		for (int y=0; y<CRC_SIZE; y++) {
 8000306:	697b      	ldr	r3, [r7, #20]
 8000308:	3301      	adds	r3, #1
 800030a:	617b      	str	r3, [r7, #20]
 800030c:	697b      	ldr	r3, [r7, #20]
 800030e:	2b7f      	cmp	r3, #127	; 0x7f
 8000310:	dde6      	ble.n	80002e0 <main+0xa8>
			}
		}
		circle_cnt = 0;
 8000312:	4b54      	ldr	r3, [pc, #336]	; (8000464 <main+0x22c>)
 8000314:	2200      	movs	r2, #0
 8000316:	601a      	str	r2, [r3, #0]

		suma_bit = 0;
 8000318:	4b55      	ldr	r3, [pc, #340]	; (8000470 <main+0x238>)
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
		 for (int k=0; k<CRC_SIZE; k++) {
 800031e:	2300      	movs	r3, #0
 8000320:	613b      	str	r3, [r7, #16]
 8000322:	e00c      	b.n	800033e <main+0x106>
			 suma_bit = suma_bit + bit[k];
 8000324:	4a51      	ldr	r2, [pc, #324]	; (800046c <main+0x234>)
 8000326:	693b      	ldr	r3, [r7, #16]
 8000328:	4413      	add	r3, r2
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	461a      	mov	r2, r3
 800032e:	4b50      	ldr	r3, [pc, #320]	; (8000470 <main+0x238>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	4413      	add	r3, r2
 8000334:	4a4e      	ldr	r2, [pc, #312]	; (8000470 <main+0x238>)
 8000336:	6013      	str	r3, [r2, #0]
		 for (int k=0; k<CRC_SIZE; k++) {
 8000338:	693b      	ldr	r3, [r7, #16]
 800033a:	3301      	adds	r3, #1
 800033c:	613b      	str	r3, [r7, #16]
 800033e:	693b      	ldr	r3, [r7, #16]
 8000340:	2b7f      	cmp	r3, #127	; 0x7f
 8000342:	ddef      	ble.n	8000324 <main+0xec>
		 }

//		sprintf(DataChar,"   %d", (int)suma_bit);
//		HAL_UART_Transmit(&huart1, (uint8_t *)DataChar, strlen(DataChar), 100);

		 if ( suma_bit > offset_res) {
 8000344:	4b4a      	ldr	r3, [pc, #296]	; (8000470 <main+0x238>)
 8000346:	681a      	ldr	r2, [r3, #0]
 8000348:	4b4a      	ldr	r3, [pc, #296]	; (8000474 <main+0x23c>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	429a      	cmp	r2, r3
 800034e:	d903      	bls.n	8000358 <main+0x120>
			 odin++;
 8000350:	6a3b      	ldr	r3, [r7, #32]
 8000352:	3301      	adds	r3, #1
 8000354:	623b      	str	r3, [r7, #32]
 8000356:	e002      	b.n	800035e <main+0x126>
		 } else {
			 zero++;
 8000358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800035a:	3301      	adds	r3, #1
 800035c:	627b      	str	r3, [r7, #36]	; 0x24
		 }

		 uint32_t promile = (odin*1000) / (odin+zero);
 800035e:	6a3b      	ldr	r3, [r7, #32]
 8000360:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000364:	fb03 f202 	mul.w	r2, r3, r2
 8000368:	6a39      	ldr	r1, [r7, #32]
 800036a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800036c:	440b      	add	r3, r1
 800036e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000372:	607b      	str	r3, [r7, #4]
		 if ( promile > 500) {
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800037a:	d904      	bls.n	8000386 <main+0x14e>
			 offset++;
 800037c:	4b3e      	ldr	r3, [pc, #248]	; (8000478 <main+0x240>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	3301      	adds	r3, #1
 8000382:	4a3d      	ldr	r2, [pc, #244]	; (8000478 <main+0x240>)
 8000384:	6013      	str	r3, [r2, #0]
		 }
		 if ( promile < 500) {
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800038c:	d204      	bcs.n	8000398 <main+0x160>
			 offset--;
 800038e:	4b3a      	ldr	r3, [pc, #232]	; (8000478 <main+0x240>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	3b01      	subs	r3, #1
 8000394:	4a38      	ldr	r2, [pc, #224]	; (8000478 <main+0x240>)
 8000396:	6013      	str	r3, [r2, #0]
//
//		 if (offset > 25) {
//			 offset = 25;
//		 }

		 if (offset < 34) {
 8000398:	4b37      	ldr	r3, [pc, #220]	; (8000478 <main+0x240>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	2b21      	cmp	r3, #33	; 0x21
 800039e:	dc02      	bgt.n	80003a6 <main+0x16e>
			 offset = 34 ;
 80003a0:	4b35      	ldr	r3, [pc, #212]	; (8000478 <main+0x240>)
 80003a2:	2222      	movs	r2, #34	; 0x22
 80003a4:	601a      	str	r2, [r3, #0]
		 }

		 if (offset > 52) {
 80003a6:	4b34      	ldr	r3, [pc, #208]	; (8000478 <main+0x240>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	2b34      	cmp	r3, #52	; 0x34
 80003ac:	dd02      	ble.n	80003b4 <main+0x17c>
			 offset = 52;
 80003ae:	4b32      	ldr	r3, [pc, #200]	; (8000478 <main+0x240>)
 80003b0:	2234      	movs	r2, #52	; 0x34
 80003b2:	601a      	str	r2, [r3, #0]
		 }

		offset_array[offset_counter] = offset;
 80003b4:	4b30      	ldr	r3, [pc, #192]	; (8000478 <main+0x240>)
 80003b6:	681a      	ldr	r2, [r3, #0]
 80003b8:	4b30      	ldr	r3, [pc, #192]	; (800047c <main+0x244>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4611      	mov	r1, r2
 80003be:	4a30      	ldr	r2, [pc, #192]	; (8000480 <main+0x248>)
 80003c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if (offset_counter < 128) {
 80003c4:	4b2d      	ldr	r3, [pc, #180]	; (800047c <main+0x244>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	2b7f      	cmp	r3, #127	; 0x7f
 80003ca:	d805      	bhi.n	80003d8 <main+0x1a0>
			offset_counter++;
 80003cc:	4b2b      	ldr	r3, [pc, #172]	; (800047c <main+0x244>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	3301      	adds	r3, #1
 80003d2:	4a2a      	ldr	r2, [pc, #168]	; (800047c <main+0x244>)
 80003d4:	6013      	str	r3, [r2, #0]
 80003d6:	e002      	b.n	80003de <main+0x1a6>
		} else {
			offset_counter = 0;
 80003d8:	4b28      	ldr	r3, [pc, #160]	; (800047c <main+0x244>)
 80003da:	2200      	movs	r2, #0
 80003dc:	601a      	str	r2, [r3, #0]
		}

		uint32_t	offset_summa = 0 ;
 80003de:	2300      	movs	r3, #0
 80003e0:	60fb      	str	r3, [r7, #12]
		for (int i=0; i<128; i++) {
 80003e2:	2300      	movs	r3, #0
 80003e4:	60bb      	str	r3, [r7, #8]
 80003e6:	e009      	b.n	80003fc <main+0x1c4>
			offset_summa = offset_summa + offset_array[i];
 80003e8:	4a25      	ldr	r2, [pc, #148]	; (8000480 <main+0x248>)
 80003ea:	68bb      	ldr	r3, [r7, #8]
 80003ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003f0:	68fa      	ldr	r2, [r7, #12]
 80003f2:	4413      	add	r3, r2
 80003f4:	60fb      	str	r3, [r7, #12]
		for (int i=0; i<128; i++) {
 80003f6:	68bb      	ldr	r3, [r7, #8]
 80003f8:	3301      	adds	r3, #1
 80003fa:	60bb      	str	r3, [r7, #8]
 80003fc:	68bb      	ldr	r3, [r7, #8]
 80003fe:	2b7f      	cmp	r3, #127	; 0x7f
 8000400:	ddf2      	ble.n	80003e8 <main+0x1b0>
		}
		offset_res = offset_summa/128 ;
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	09db      	lsrs	r3, r3, #7
 8000406:	4a1b      	ldr	r2, [pc, #108]	; (8000474 <main+0x23c>)
 8000408:	6013      	str	r3, [r2, #0]

		if (offset_counter == 1) {
 800040a:	4b1c      	ldr	r3, [pc, #112]	; (800047c <main+0x244>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	2b01      	cmp	r3, #1
 8000410:	f47f af45 	bne.w	800029e <main+0x66>
		  sprintf(DataChar,"\t%03lu %03lu  %02lu\t%d %lu\r\n",  zero, odin, promile, offset, offset_res );
 8000414:	4b18      	ldr	r3, [pc, #96]	; (8000478 <main+0x240>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a16      	ldr	r2, [pc, #88]	; (8000474 <main+0x23c>)
 800041a:	6812      	ldr	r2, [r2, #0]
 800041c:	9202      	str	r2, [sp, #8]
 800041e:	9301      	str	r3, [sp, #4]
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	9300      	str	r3, [sp, #0]
 8000424:	6a3b      	ldr	r3, [r7, #32]
 8000426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000428:	4916      	ldr	r1, [pc, #88]	; (8000484 <main+0x24c>)
 800042a:	480a      	ldr	r0, [pc, #40]	; (8000454 <main+0x21c>)
 800042c:	f002 fbb4 	bl	8002b98 <siprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t *)DataChar, strlen(DataChar), 100);
 8000430:	4808      	ldr	r0, [pc, #32]	; (8000454 <main+0x21c>)
 8000432:	f7ff fe8b 	bl	800014c <strlen>
 8000436:	4603      	mov	r3, r0
 8000438:	b29a      	uxth	r2, r3
 800043a:	2364      	movs	r3, #100	; 0x64
 800043c:	4905      	ldr	r1, [pc, #20]	; (8000454 <main+0x21c>)
 800043e:	4806      	ldr	r0, [pc, #24]	; (8000458 <main+0x220>)
 8000440:	f002 fa0d 	bl	800285e <HAL_UART_Transmit>
  {
 8000444:	e72b      	b.n	800029e <main+0x66>
 8000446:	bf00      	nop
 8000448:	080034a4 	.word	0x080034a4
 800044c:	080034b0 	.word	0x080034b0
 8000450:	080034bc 	.word	0x080034bc
 8000454:	20000294 	.word	0x20000294
 8000458:	2000071c 	.word	0x2000071c
 800045c:	2000068c 	.word	0x2000068c
 8000460:	200006d4 	.word	0x200006d4
 8000464:	20000394 	.word	0x20000394
 8000468:	20000398 	.word	0x20000398
 800046c:	200005a4 	.word	0x200005a4
 8000470:	20000628 	.word	0x20000628
 8000474:	20000004 	.word	0x20000004
 8000478:	20000000 	.word	0x20000000
 800047c:	2000062c 	.word	0x2000062c
 8000480:	20000008 	.word	0x20000008
 8000484:	080034d4 	.word	0x080034d4

08000488 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b090      	sub	sp, #64	; 0x40
 800048c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800048e:	f107 0318 	add.w	r3, r7, #24
 8000492:	2228      	movs	r2, #40	; 0x28
 8000494:	2100      	movs	r1, #0
 8000496:	4618      	mov	r0, r3
 8000498:	f002 fb76 	bl	8002b88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800049c:	1d3b      	adds	r3, r7, #4
 800049e:	2200      	movs	r2, #0
 80004a0:	601a      	str	r2, [r3, #0]
 80004a2:	605a      	str	r2, [r3, #4]
 80004a4:	609a      	str	r2, [r3, #8]
 80004a6:	60da      	str	r2, [r3, #12]
 80004a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004aa:	2301      	movs	r3, #1
 80004ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004b4:	2300      	movs	r3, #0
 80004b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004b8:	2301      	movs	r3, #1
 80004ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004bc:	2302      	movs	r3, #2
 80004be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004c6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80004ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004cc:	f107 0318 	add.w	r3, r7, #24
 80004d0:	4618      	mov	r0, r3
 80004d2:	f000 fe7b 	bl	80011cc <HAL_RCC_OscConfig>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80004dc:	f000 f819 	bl	8000512 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004e0:	230f      	movs	r3, #15
 80004e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004e4:	2302      	movs	r3, #2
 80004e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004e8:	2300      	movs	r3, #0
 80004ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004f2:	2300      	movs	r3, #0
 80004f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	2102      	movs	r1, #2
 80004fa:	4618      	mov	r0, r3
 80004fc:	f001 f8e8 	bl	80016d0 <HAL_RCC_ClockConfig>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000506:	f000 f804 	bl	8000512 <Error_Handler>
  }
}
 800050a:	bf00      	nop
 800050c:	3740      	adds	r7, #64	; 0x40
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}

08000512 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000512:	b480      	push	{r7}
 8000514:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000516:	b672      	cpsid	i
}
 8000518:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800051a:	e7fe      	b.n	800051a <Error_Handler+0x8>

0800051c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000520:	4b15      	ldr	r3, [pc, #84]	; (8000578 <MX_SPI1_Init+0x5c>)
 8000522:	4a16      	ldr	r2, [pc, #88]	; (800057c <MX_SPI1_Init+0x60>)
 8000524:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000526:	4b14      	ldr	r3, [pc, #80]	; (8000578 <MX_SPI1_Init+0x5c>)
 8000528:	2200      	movs	r2, #0
 800052a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800052c:	4b12      	ldr	r3, [pc, #72]	; (8000578 <MX_SPI1_Init+0x5c>)
 800052e:	2200      	movs	r2, #0
 8000530:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000532:	4b11      	ldr	r3, [pc, #68]	; (8000578 <MX_SPI1_Init+0x5c>)
 8000534:	2200      	movs	r2, #0
 8000536:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000538:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <MX_SPI1_Init+0x5c>)
 800053a:	2200      	movs	r2, #0
 800053c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800053e:	4b0e      	ldr	r3, [pc, #56]	; (8000578 <MX_SPI1_Init+0x5c>)
 8000540:	2200      	movs	r2, #0
 8000542:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <MX_SPI1_Init+0x5c>)
 8000546:	f44f 7200 	mov.w	r2, #512	; 0x200
 800054a:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800054c:	4b0a      	ldr	r3, [pc, #40]	; (8000578 <MX_SPI1_Init+0x5c>)
 800054e:	2200      	movs	r2, #0
 8000550:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000552:	4b09      	ldr	r3, [pc, #36]	; (8000578 <MX_SPI1_Init+0x5c>)
 8000554:	2200      	movs	r2, #0
 8000556:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000558:	4b07      	ldr	r3, [pc, #28]	; (8000578 <MX_SPI1_Init+0x5c>)
 800055a:	2200      	movs	r2, #0
 800055c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800055e:	4b06      	ldr	r3, [pc, #24]	; (8000578 <MX_SPI1_Init+0x5c>)
 8000560:	220a      	movs	r2, #10
 8000562:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000564:	4804      	ldr	r0, [pc, #16]	; (8000578 <MX_SPI1_Init+0x5c>)
 8000566:	f001 fa4b 	bl	8001a00 <HAL_SPI_Init>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 8000570:	f7ff ffcf 	bl	8000512 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000574:	bf00      	nop
 8000576:	bd80      	pop	{r7, pc}
 8000578:	20000630 	.word	0x20000630
 800057c:	40013000 	.word	0x40013000

08000580 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08a      	sub	sp, #40	; 0x28
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000588:	f107 0314 	add.w	r3, r7, #20
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a22      	ldr	r2, [pc, #136]	; (8000624 <HAL_SPI_MspInit+0xa4>)
 800059c:	4293      	cmp	r3, r2
 800059e:	d13d      	bne.n	800061c <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80005a0:	4b21      	ldr	r3, [pc, #132]	; (8000628 <HAL_SPI_MspInit+0xa8>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	4a20      	ldr	r2, [pc, #128]	; (8000628 <HAL_SPI_MspInit+0xa8>)
 80005a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005aa:	6193      	str	r3, [r2, #24]
 80005ac:	4b1e      	ldr	r3, [pc, #120]	; (8000628 <HAL_SPI_MspInit+0xa8>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005b4:	613b      	str	r3, [r7, #16]
 80005b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b8:	4b1b      	ldr	r3, [pc, #108]	; (8000628 <HAL_SPI_MspInit+0xa8>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	4a1a      	ldr	r2, [pc, #104]	; (8000628 <HAL_SPI_MspInit+0xa8>)
 80005be:	f043 0308 	orr.w	r3, r3, #8
 80005c2:	6193      	str	r3, [r2, #24]
 80005c4:	4b18      	ldr	r3, [pc, #96]	; (8000628 <HAL_SPI_MspInit+0xa8>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	f003 0308 	and.w	r3, r3, #8
 80005cc:	60fb      	str	r3, [r7, #12]
 80005ce:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80005d0:	2328      	movs	r3, #40	; 0x28
 80005d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005d4:	2300      	movs	r3, #0
 80005d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d8:	2300      	movs	r3, #0
 80005da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005dc:	f107 0314 	add.w	r3, r7, #20
 80005e0:	4619      	mov	r1, r3
 80005e2:	4812      	ldr	r0, [pc, #72]	; (800062c <HAL_SPI_MspInit+0xac>)
 80005e4:	f000 fc34 	bl	8000e50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80005e8:	2310      	movs	r3, #16
 80005ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ec:	2302      	movs	r3, #2
 80005ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005f0:	2303      	movs	r3, #3
 80005f2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005f4:	f107 0314 	add.w	r3, r7, #20
 80005f8:	4619      	mov	r1, r3
 80005fa:	480c      	ldr	r0, [pc, #48]	; (800062c <HAL_SPI_MspInit+0xac>)
 80005fc:	f000 fc28 	bl	8000e50 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8000600:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <HAL_SPI_MspInit+0xb0>)
 8000602:	685b      	ldr	r3, [r3, #4]
 8000604:	627b      	str	r3, [r7, #36]	; 0x24
 8000606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000608:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800060c:	627b      	str	r3, [r7, #36]	; 0x24
 800060e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000610:	f043 0301 	orr.w	r3, r3, #1
 8000614:	627b      	str	r3, [r7, #36]	; 0x24
 8000616:	4a06      	ldr	r2, [pc, #24]	; (8000630 <HAL_SPI_MspInit+0xb0>)
 8000618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800061a:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800061c:	bf00      	nop
 800061e:	3728      	adds	r7, #40	; 0x28
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40013000 	.word	0x40013000
 8000628:	40021000 	.word	0x40021000
 800062c:	40010c00 	.word	0x40010c00
 8000630:	40010000 	.word	0x40010000

08000634 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800063a:	4b15      	ldr	r3, [pc, #84]	; (8000690 <HAL_MspInit+0x5c>)
 800063c:	699b      	ldr	r3, [r3, #24]
 800063e:	4a14      	ldr	r2, [pc, #80]	; (8000690 <HAL_MspInit+0x5c>)
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	6193      	str	r3, [r2, #24]
 8000646:	4b12      	ldr	r3, [pc, #72]	; (8000690 <HAL_MspInit+0x5c>)
 8000648:	699b      	ldr	r3, [r3, #24]
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000652:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <HAL_MspInit+0x5c>)
 8000654:	69db      	ldr	r3, [r3, #28]
 8000656:	4a0e      	ldr	r2, [pc, #56]	; (8000690 <HAL_MspInit+0x5c>)
 8000658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065c:	61d3      	str	r3, [r2, #28]
 800065e:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <HAL_MspInit+0x5c>)
 8000660:	69db      	ldr	r3, [r3, #28]
 8000662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800066a:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <HAL_MspInit+0x60>)
 800066c:	685b      	ldr	r3, [r3, #4]
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	4a04      	ldr	r2, [pc, #16]	; (8000694 <HAL_MspInit+0x60>)
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000686:	bf00      	nop
 8000688:	3714      	adds	r7, #20
 800068a:	46bd      	mov	sp, r7
 800068c:	bc80      	pop	{r7}
 800068e:	4770      	bx	lr
 8000690:	40021000 	.word	0x40021000
 8000694:	40010000 	.word	0x40010000

08000698 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800069c:	e7fe      	b.n	800069c <NMI_Handler+0x4>

0800069e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800069e:	b480      	push	{r7}
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006a2:	e7fe      	b.n	80006a2 <HardFault_Handler+0x4>

080006a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006a8:	e7fe      	b.n	80006a8 <MemManage_Handler+0x4>

080006aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006aa:	b480      	push	{r7}
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ae:	e7fe      	b.n	80006ae <BusFault_Handler+0x4>

080006b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006b4:	e7fe      	b.n	80006b4 <UsageFault_Handler+0x4>

080006b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006b6:	b480      	push	{r7}
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	bc80      	pop	{r7}
 80006c0:	4770      	bx	lr

080006c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006c2:	b480      	push	{r7}
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bc80      	pop	{r7}
 80006cc:	4770      	bx	lr

080006ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ce:	b480      	push	{r7}
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006d2:	bf00      	nop
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bc80      	pop	{r7}
 80006d8:	4770      	bx	lr

080006da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006da:	b580      	push	{r7, lr}
 80006dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006de:	f000 fa69 	bl	8000bb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
	...

080006e8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

	tmr_value[circle_cnt] = TIM4->CNT ;
 80006ec:	4a0b      	ldr	r2, [pc, #44]	; (800071c <EXTI2_IRQHandler+0x34>)
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <EXTI2_IRQHandler+0x38>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80006f4:	490b      	ldr	r1, [pc, #44]	; (8000724 <EXTI2_IRQHandler+0x3c>)
 80006f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	TIM4->CNT = 0;
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <EXTI2_IRQHandler+0x34>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	625a      	str	r2, [r3, #36]	; 0x24

	if (circle_cnt < (CRC_SIZE+2)) {
 8000700:	4b07      	ldr	r3, [pc, #28]	; (8000720 <EXTI2_IRQHandler+0x38>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2b81      	cmp	r3, #129	; 0x81
 8000706:	d804      	bhi.n	8000712 <EXTI2_IRQHandler+0x2a>
		circle_cnt ++;
 8000708:	4b05      	ldr	r3, [pc, #20]	; (8000720 <EXTI2_IRQHandler+0x38>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	3301      	adds	r3, #1
 800070e:	4a04      	ldr	r2, [pc, #16]	; (8000720 <EXTI2_IRQHandler+0x38>)
 8000710:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RNG_Pin);
 8000712:	2004      	movs	r0, #4
 8000714:	f000 fd38 	bl	8001188 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40000800 	.word	0x40000800
 8000720:	20000394 	.word	0x20000394
 8000724:	20000398 	.word	0x20000398

08000728 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b086      	sub	sp, #24
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000730:	4a14      	ldr	r2, [pc, #80]	; (8000784 <_sbrk+0x5c>)
 8000732:	4b15      	ldr	r3, [pc, #84]	; (8000788 <_sbrk+0x60>)
 8000734:	1ad3      	subs	r3, r2, r3
 8000736:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800073c:	4b13      	ldr	r3, [pc, #76]	; (800078c <_sbrk+0x64>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d102      	bne.n	800074a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <_sbrk+0x64>)
 8000746:	4a12      	ldr	r2, [pc, #72]	; (8000790 <_sbrk+0x68>)
 8000748:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800074a:	4b10      	ldr	r3, [pc, #64]	; (800078c <_sbrk+0x64>)
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4413      	add	r3, r2
 8000752:	693a      	ldr	r2, [r7, #16]
 8000754:	429a      	cmp	r2, r3
 8000756:	d207      	bcs.n	8000768 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000758:	f002 f9ec 	bl	8002b34 <__errno>
 800075c:	4603      	mov	r3, r0
 800075e:	220c      	movs	r2, #12
 8000760:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000762:	f04f 33ff 	mov.w	r3, #4294967295
 8000766:	e009      	b.n	800077c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000768:	4b08      	ldr	r3, [pc, #32]	; (800078c <_sbrk+0x64>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800076e:	4b07      	ldr	r3, [pc, #28]	; (800078c <_sbrk+0x64>)
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	4413      	add	r3, r2
 8000776:	4a05      	ldr	r2, [pc, #20]	; (800078c <_sbrk+0x64>)
 8000778:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800077a:	68fb      	ldr	r3, [r7, #12]
}
 800077c:	4618      	mov	r0, r3
 800077e:	3718      	adds	r7, #24
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20005000 	.word	0x20005000
 8000788:	00000400 	.word	0x00000400
 800078c:	20000688 	.word	0x20000688
 8000790:	20000778 	.word	0x20000778

08000794 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr

080007a0 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08e      	sub	sp, #56	; 0x38
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b4:	f107 0320 	add.w	r3, r7, #32
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]
 80007cc:	615a      	str	r2, [r3, #20]
 80007ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007d0:	4b2c      	ldr	r3, [pc, #176]	; (8000884 <MX_TIM3_Init+0xe4>)
 80007d2:	4a2d      	ldr	r2, [pc, #180]	; (8000888 <MX_TIM3_Init+0xe8>)
 80007d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80007d6:	4b2b      	ldr	r3, [pc, #172]	; (8000884 <MX_TIM3_Init+0xe4>)
 80007d8:	2200      	movs	r2, #0
 80007da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007dc:	4b29      	ldr	r3, [pc, #164]	; (8000884 <MX_TIM3_Init+0xe4>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80007e2:	4b28      	ldr	r3, [pc, #160]	; (8000884 <MX_TIM3_Init+0xe4>)
 80007e4:	2264      	movs	r2, #100	; 0x64
 80007e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e8:	4b26      	ldr	r3, [pc, #152]	; (8000884 <MX_TIM3_Init+0xe4>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ee:	4b25      	ldr	r3, [pc, #148]	; (8000884 <MX_TIM3_Init+0xe4>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007f4:	4823      	ldr	r0, [pc, #140]	; (8000884 <MX_TIM3_Init+0xe4>)
 80007f6:	f001 f987 	bl	8001b08 <HAL_TIM_Base_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000800:	f7ff fe87 	bl	8000512 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000808:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800080a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800080e:	4619      	mov	r1, r3
 8000810:	481c      	ldr	r0, [pc, #112]	; (8000884 <MX_TIM3_Init+0xe4>)
 8000812:	f001 fc11 	bl	8002038 <HAL_TIM_ConfigClockSource>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 800081c:	f7ff fe79 	bl	8000512 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000820:	4818      	ldr	r0, [pc, #96]	; (8000884 <MX_TIM3_Init+0xe4>)
 8000822:	f001 fa0b 	bl	8001c3c <HAL_TIM_PWM_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800082c:	f7ff fe71 	bl	8000512 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000830:	2300      	movs	r3, #0
 8000832:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000834:	2300      	movs	r3, #0
 8000836:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000838:	f107 0320 	add.w	r3, r7, #32
 800083c:	4619      	mov	r1, r3
 800083e:	4811      	ldr	r0, [pc, #68]	; (8000884 <MX_TIM3_Init+0xe4>)
 8000840:	f001 ff62 	bl	8002708 <HAL_TIMEx_MasterConfigSynchronization>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800084a:	f7ff fe62 	bl	8000512 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800084e:	2360      	movs	r3, #96	; 0x60
 8000850:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8000852:	2332      	movs	r3, #50	; 0x32
 8000854:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	2200      	movs	r2, #0
 8000862:	4619      	mov	r1, r3
 8000864:	4807      	ldr	r0, [pc, #28]	; (8000884 <MX_TIM3_Init+0xe4>)
 8000866:	f001 fb29 	bl	8001ebc <HAL_TIM_PWM_ConfigChannel>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000870:	f7ff fe4f 	bl	8000512 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000874:	4803      	ldr	r0, [pc, #12]	; (8000884 <MX_TIM3_Init+0xe4>)
 8000876:	f000 f889 	bl	800098c <HAL_TIM_MspPostInit>

}
 800087a:	bf00      	nop
 800087c:	3738      	adds	r7, #56	; 0x38
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	2000068c 	.word	0x2000068c
 8000888:	40000400 	.word	0x40000400

0800088c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000892:	f107 0308 	add.w	r3, r7, #8
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a0:	463b      	mov	r3, r7
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008a8:	4b1d      	ldr	r3, [pc, #116]	; (8000920 <MX_TIM4_Init+0x94>)
 80008aa:	4a1e      	ldr	r2, [pc, #120]	; (8000924 <MX_TIM4_Init+0x98>)
 80008ac:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80008ae:	4b1c      	ldr	r3, [pc, #112]	; (8000920 <MX_TIM4_Init+0x94>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b4:	4b1a      	ldr	r3, [pc, #104]	; (8000920 <MX_TIM4_Init+0x94>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80008ba:	4b19      	ldr	r3, [pc, #100]	; (8000920 <MX_TIM4_Init+0x94>)
 80008bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008c0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c2:	4b17      	ldr	r3, [pc, #92]	; (8000920 <MX_TIM4_Init+0x94>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c8:	4b15      	ldr	r3, [pc, #84]	; (8000920 <MX_TIM4_Init+0x94>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80008ce:	4814      	ldr	r0, [pc, #80]	; (8000920 <MX_TIM4_Init+0x94>)
 80008d0:	f001 f91a 	bl	8001b08 <HAL_TIM_Base_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80008da:	f7ff fe1a 	bl	8000512 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80008e4:	f107 0308 	add.w	r3, r7, #8
 80008e8:	4619      	mov	r1, r3
 80008ea:	480d      	ldr	r0, [pc, #52]	; (8000920 <MX_TIM4_Init+0x94>)
 80008ec:	f001 fba4 	bl	8002038 <HAL_TIM_ConfigClockSource>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80008f6:	f7ff fe0c 	bl	8000512 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008fa:	2300      	movs	r3, #0
 80008fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008fe:	2300      	movs	r3, #0
 8000900:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000902:	463b      	mov	r3, r7
 8000904:	4619      	mov	r1, r3
 8000906:	4806      	ldr	r0, [pc, #24]	; (8000920 <MX_TIM4_Init+0x94>)
 8000908:	f001 fefe 	bl	8002708 <HAL_TIMEx_MasterConfigSynchronization>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000912:	f7ff fdfe 	bl	8000512 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000916:	bf00      	nop
 8000918:	3718      	adds	r7, #24
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	200006d4 	.word	0x200006d4
 8000924:	40000800 	.word	0x40000800

08000928 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000928:	b480      	push	{r7}
 800092a:	b085      	sub	sp, #20
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a12      	ldr	r2, [pc, #72]	; (8000980 <HAL_TIM_Base_MspInit+0x58>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d10c      	bne.n	8000954 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800093a:	4b12      	ldr	r3, [pc, #72]	; (8000984 <HAL_TIM_Base_MspInit+0x5c>)
 800093c:	69db      	ldr	r3, [r3, #28]
 800093e:	4a11      	ldr	r2, [pc, #68]	; (8000984 <HAL_TIM_Base_MspInit+0x5c>)
 8000940:	f043 0302 	orr.w	r3, r3, #2
 8000944:	61d3      	str	r3, [r2, #28]
 8000946:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <HAL_TIM_Base_MspInit+0x5c>)
 8000948:	69db      	ldr	r3, [r3, #28]
 800094a:	f003 0302 	and.w	r3, r3, #2
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000952:	e010      	b.n	8000976 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM4)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a0b      	ldr	r2, [pc, #44]	; (8000988 <HAL_TIM_Base_MspInit+0x60>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d10b      	bne.n	8000976 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <HAL_TIM_Base_MspInit+0x5c>)
 8000960:	69db      	ldr	r3, [r3, #28]
 8000962:	4a08      	ldr	r2, [pc, #32]	; (8000984 <HAL_TIM_Base_MspInit+0x5c>)
 8000964:	f043 0304 	orr.w	r3, r3, #4
 8000968:	61d3      	str	r3, [r2, #28]
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <HAL_TIM_Base_MspInit+0x5c>)
 800096c:	69db      	ldr	r3, [r3, #28]
 800096e:	f003 0304 	and.w	r3, r3, #4
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]
}
 8000976:	bf00      	nop
 8000978:	3714      	adds	r7, #20
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr
 8000980:	40000400 	.word	0x40000400
 8000984:	40021000 	.word	0x40021000
 8000988:	40000800 	.word	0x40000800

0800098c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b088      	sub	sp, #32
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000994:	f107 0310 	add.w	r3, r7, #16
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4a0f      	ldr	r2, [pc, #60]	; (80009e4 <HAL_TIM_MspPostInit+0x58>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d117      	bne.n	80009dc <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <HAL_TIM_MspPostInit+0x5c>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	4a0d      	ldr	r2, [pc, #52]	; (80009e8 <HAL_TIM_MspPostInit+0x5c>)
 80009b2:	f043 0304 	orr.w	r3, r3, #4
 80009b6:	6193      	str	r3, [r2, #24]
 80009b8:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <HAL_TIM_MspPostInit+0x5c>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	f003 0304 	and.w	r3, r3, #4
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80009c4:	2340      	movs	r3, #64	; 0x40
 80009c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c8:	2302      	movs	r3, #2
 80009ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2302      	movs	r3, #2
 80009ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d0:	f107 0310 	add.w	r3, r7, #16
 80009d4:	4619      	mov	r1, r3
 80009d6:	4805      	ldr	r0, [pc, #20]	; (80009ec <HAL_TIM_MspPostInit+0x60>)
 80009d8:	f000 fa3a 	bl	8000e50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80009dc:	bf00      	nop
 80009de:	3720      	adds	r7, #32
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40000400 	.word	0x40000400
 80009e8:	40021000 	.word	0x40021000
 80009ec:	40010800 	.word	0x40010800

080009f0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009f4:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <MX_USART1_UART_Init+0x4c>)
 80009f6:	4a12      	ldr	r2, [pc, #72]	; (8000a40 <MX_USART1_UART_Init+0x50>)
 80009f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009fa:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <MX_USART1_UART_Init+0x4c>)
 80009fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <MX_USART1_UART_Init+0x4c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <MX_USART1_UART_Init+0x4c>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <MX_USART1_UART_Init+0x4c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a14:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <MX_USART1_UART_Init+0x4c>)
 8000a16:	220c      	movs	r2, #12
 8000a18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1a:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <MX_USART1_UART_Init+0x4c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <MX_USART1_UART_Init+0x4c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a26:	4805      	ldr	r0, [pc, #20]	; (8000a3c <MX_USART1_UART_Init+0x4c>)
 8000a28:	f001 fecc 	bl	80027c4 <HAL_UART_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a32:	f7ff fd6e 	bl	8000512 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	2000071c 	.word	0x2000071c
 8000a40:	40013800 	.word	0x40013800

08000a44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b088      	sub	sp, #32
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 0310 	add.w	r3, r7, #16
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4a1c      	ldr	r2, [pc, #112]	; (8000ad0 <HAL_UART_MspInit+0x8c>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d131      	bne.n	8000ac8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a64:	4b1b      	ldr	r3, [pc, #108]	; (8000ad4 <HAL_UART_MspInit+0x90>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	4a1a      	ldr	r2, [pc, #104]	; (8000ad4 <HAL_UART_MspInit+0x90>)
 8000a6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a6e:	6193      	str	r3, [r2, #24]
 8000a70:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <HAL_UART_MspInit+0x90>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7c:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <HAL_UART_MspInit+0x90>)
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	4a14      	ldr	r2, [pc, #80]	; (8000ad4 <HAL_UART_MspInit+0x90>)
 8000a82:	f043 0304 	orr.w	r3, r3, #4
 8000a86:	6193      	str	r3, [r2, #24]
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <HAL_UART_MspInit+0x90>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	f003 0304 	and.w	r3, r3, #4
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa2:	f107 0310 	add.w	r3, r7, #16
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	480b      	ldr	r0, [pc, #44]	; (8000ad8 <HAL_UART_MspInit+0x94>)
 8000aaa:	f000 f9d1 	bl	8000e50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000aae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ab2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000abc:	f107 0310 	add.w	r3, r7, #16
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <HAL_UART_MspInit+0x94>)
 8000ac4:	f000 f9c4 	bl	8000e50 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000ac8:	bf00      	nop
 8000aca:	3720      	adds	r7, #32
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40013800 	.word	0x40013800
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	40010800 	.word	0x40010800

08000adc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000adc:	480c      	ldr	r0, [pc, #48]	; (8000b10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ade:	490d      	ldr	r1, [pc, #52]	; (8000b14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ae0:	4a0d      	ldr	r2, [pc, #52]	; (8000b18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ae2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae4:	e002      	b.n	8000aec <LoopCopyDataInit>

08000ae6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ae6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aea:	3304      	adds	r3, #4

08000aec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af0:	d3f9      	bcc.n	8000ae6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000af2:	4a0a      	ldr	r2, [pc, #40]	; (8000b1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000af4:	4c0a      	ldr	r4, [pc, #40]	; (8000b20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af8:	e001      	b.n	8000afe <LoopFillZerobss>

08000afa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000afa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000afc:	3204      	adds	r2, #4

08000afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000afe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b00:	d3fb      	bcc.n	8000afa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b02:	f7ff fe47 	bl	8000794 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b06:	f002 f81b 	bl	8002b40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b0a:	f7ff fb95 	bl	8000238 <main>
  bx lr
 8000b0e:	4770      	bx	lr
  ldr r0, =_sdata
 8000b10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b14:	20000278 	.word	0x20000278
  ldr r2, =_sidata
 8000b18:	08003558 	.word	0x08003558
  ldr r2, =_sbss
 8000b1c:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 8000b20:	20000774 	.word	0x20000774

08000b24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b24:	e7fe      	b.n	8000b24 <ADC1_2_IRQHandler>
	...

08000b28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <HAL_Init+0x28>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a07      	ldr	r2, [pc, #28]	; (8000b50 <HAL_Init+0x28>)
 8000b32:	f043 0310 	orr.w	r3, r3, #16
 8000b36:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b38:	2003      	movs	r0, #3
 8000b3a:	f000 f947 	bl	8000dcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b3e:	200f      	movs	r0, #15
 8000b40:	f000 f808 	bl	8000b54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b44:	f7ff fd76 	bl	8000634 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40022000 	.word	0x40022000

08000b54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <HAL_InitTick+0x54>)
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	4b12      	ldr	r3, [pc, #72]	; (8000bac <HAL_InitTick+0x58>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	4619      	mov	r1, r3
 8000b66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b72:	4618      	mov	r0, r3
 8000b74:	f000 f95f 	bl	8000e36 <HAL_SYSTICK_Config>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e00e      	b.n	8000ba0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2b0f      	cmp	r3, #15
 8000b86:	d80a      	bhi.n	8000b9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	6879      	ldr	r1, [r7, #4]
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	f000 f927 	bl	8000de2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b94:	4a06      	ldr	r2, [pc, #24]	; (8000bb0 <HAL_InitTick+0x5c>)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	e000      	b.n	8000ba0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20000208 	.word	0x20000208
 8000bac:	20000210 	.word	0x20000210
 8000bb0:	2000020c 	.word	0x2000020c

08000bb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb8:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <HAL_IncTick+0x1c>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <HAL_IncTick+0x20>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	4a03      	ldr	r2, [pc, #12]	; (8000bd4 <HAL_IncTick+0x20>)
 8000bc6:	6013      	str	r3, [r2, #0]
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr
 8000bd0:	20000210 	.word	0x20000210
 8000bd4:	20000760 	.word	0x20000760

08000bd8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  return uwTick;
 8000bdc:	4b02      	ldr	r3, [pc, #8]	; (8000be8 <HAL_GetTick+0x10>)
 8000bde:	681b      	ldr	r3, [r3, #0]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr
 8000be8:	20000760 	.word	0x20000760

08000bec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bf4:	f7ff fff0 	bl	8000bd8 <HAL_GetTick>
 8000bf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c04:	d005      	beq.n	8000c12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c06:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <HAL_Delay+0x44>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	4413      	add	r3, r2
 8000c10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c12:	bf00      	nop
 8000c14:	f7ff ffe0 	bl	8000bd8 <HAL_GetTick>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d8f7      	bhi.n	8000c14 <HAL_Delay+0x28>
  {
  }
}
 8000c24:	bf00      	nop
 8000c26:	bf00      	nop
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000210 	.word	0x20000210

08000c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <__NVIC_SetPriorityGrouping+0x44>)
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c4a:	68ba      	ldr	r2, [r7, #8]
 8000c4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c50:	4013      	ands	r3, r2
 8000c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c66:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <__NVIC_SetPriorityGrouping+0x44>)
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	60d3      	str	r3, [r2, #12]
}
 8000c6c:	bf00      	nop
 8000c6e:	3714      	adds	r7, #20
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bc80      	pop	{r7}
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c80:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <__NVIC_GetPriorityGrouping+0x18>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	0a1b      	lsrs	r3, r3, #8
 8000c86:	f003 0307 	and.w	r3, r3, #7
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bc80      	pop	{r7}
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	db0b      	blt.n	8000cc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	f003 021f 	and.w	r2, r3, #31
 8000cb0:	4906      	ldr	r1, [pc, #24]	; (8000ccc <__NVIC_EnableIRQ+0x34>)
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	095b      	lsrs	r3, r3, #5
 8000cb8:	2001      	movs	r0, #1
 8000cba:	fa00 f202 	lsl.w	r2, r0, r2
 8000cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr
 8000ccc:	e000e100 	.word	0xe000e100

08000cd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	6039      	str	r1, [r7, #0]
 8000cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db0a      	blt.n	8000cfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	490c      	ldr	r1, [pc, #48]	; (8000d1c <__NVIC_SetPriority+0x4c>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	0112      	lsls	r2, r2, #4
 8000cf0:	b2d2      	uxtb	r2, r2
 8000cf2:	440b      	add	r3, r1
 8000cf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf8:	e00a      	b.n	8000d10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4908      	ldr	r1, [pc, #32]	; (8000d20 <__NVIC_SetPriority+0x50>)
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	f003 030f 	and.w	r3, r3, #15
 8000d06:	3b04      	subs	r3, #4
 8000d08:	0112      	lsls	r2, r2, #4
 8000d0a:	b2d2      	uxtb	r2, r2
 8000d0c:	440b      	add	r3, r1
 8000d0e:	761a      	strb	r2, [r3, #24]
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000e100 	.word	0xe000e100
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b089      	sub	sp, #36	; 0x24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	f1c3 0307 	rsb	r3, r3, #7
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	bf28      	it	cs
 8000d42:	2304      	movcs	r3, #4
 8000d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3304      	adds	r3, #4
 8000d4a:	2b06      	cmp	r3, #6
 8000d4c:	d902      	bls.n	8000d54 <NVIC_EncodePriority+0x30>
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3b03      	subs	r3, #3
 8000d52:	e000      	b.n	8000d56 <NVIC_EncodePriority+0x32>
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	f04f 32ff 	mov.w	r2, #4294967295
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43da      	mvns	r2, r3
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	401a      	ands	r2, r3
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	fa01 f303 	lsl.w	r3, r1, r3
 8000d76:	43d9      	mvns	r1, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d7c:	4313      	orrs	r3, r2
         );
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3724      	adds	r7, #36	; 0x24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc80      	pop	{r7}
 8000d86:	4770      	bx	lr

08000d88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3b01      	subs	r3, #1
 8000d94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d98:	d301      	bcc.n	8000d9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e00f      	b.n	8000dbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d9e:	4a0a      	ldr	r2, [pc, #40]	; (8000dc8 <SysTick_Config+0x40>)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000da6:	210f      	movs	r1, #15
 8000da8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dac:	f7ff ff90 	bl	8000cd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db0:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <SysTick_Config+0x40>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000db6:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <SysTick_Config+0x40>)
 8000db8:	2207      	movs	r2, #7
 8000dba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	e000e010 	.word	0xe000e010

08000dcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f7ff ff2d 	bl	8000c34 <__NVIC_SetPriorityGrouping>
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b086      	sub	sp, #24
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	4603      	mov	r3, r0
 8000dea:	60b9      	str	r1, [r7, #8]
 8000dec:	607a      	str	r2, [r7, #4]
 8000dee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000df4:	f7ff ff42 	bl	8000c7c <__NVIC_GetPriorityGrouping>
 8000df8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	68b9      	ldr	r1, [r7, #8]
 8000dfe:	6978      	ldr	r0, [r7, #20]
 8000e00:	f7ff ff90 	bl	8000d24 <NVIC_EncodePriority>
 8000e04:	4602      	mov	r2, r0
 8000e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff5f 	bl	8000cd0 <__NVIC_SetPriority>
}
 8000e12:	bf00      	nop
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	4603      	mov	r3, r0
 8000e22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff ff35 	bl	8000c98 <__NVIC_EnableIRQ>
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b082      	sub	sp, #8
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f7ff ffa2 	bl	8000d88 <SysTick_Config>
 8000e44:	4603      	mov	r3, r0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b08b      	sub	sp, #44	; 0x2c
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e62:	e169      	b.n	8001138 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e64:	2201      	movs	r2, #1
 8000e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	69fa      	ldr	r2, [r7, #28]
 8000e74:	4013      	ands	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	f040 8158 	bne.w	8001132 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	4a9a      	ldr	r2, [pc, #616]	; (80010f0 <HAL_GPIO_Init+0x2a0>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d05e      	beq.n	8000f4a <HAL_GPIO_Init+0xfa>
 8000e8c:	4a98      	ldr	r2, [pc, #608]	; (80010f0 <HAL_GPIO_Init+0x2a0>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d875      	bhi.n	8000f7e <HAL_GPIO_Init+0x12e>
 8000e92:	4a98      	ldr	r2, [pc, #608]	; (80010f4 <HAL_GPIO_Init+0x2a4>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d058      	beq.n	8000f4a <HAL_GPIO_Init+0xfa>
 8000e98:	4a96      	ldr	r2, [pc, #600]	; (80010f4 <HAL_GPIO_Init+0x2a4>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d86f      	bhi.n	8000f7e <HAL_GPIO_Init+0x12e>
 8000e9e:	4a96      	ldr	r2, [pc, #600]	; (80010f8 <HAL_GPIO_Init+0x2a8>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d052      	beq.n	8000f4a <HAL_GPIO_Init+0xfa>
 8000ea4:	4a94      	ldr	r2, [pc, #592]	; (80010f8 <HAL_GPIO_Init+0x2a8>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d869      	bhi.n	8000f7e <HAL_GPIO_Init+0x12e>
 8000eaa:	4a94      	ldr	r2, [pc, #592]	; (80010fc <HAL_GPIO_Init+0x2ac>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d04c      	beq.n	8000f4a <HAL_GPIO_Init+0xfa>
 8000eb0:	4a92      	ldr	r2, [pc, #584]	; (80010fc <HAL_GPIO_Init+0x2ac>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d863      	bhi.n	8000f7e <HAL_GPIO_Init+0x12e>
 8000eb6:	4a92      	ldr	r2, [pc, #584]	; (8001100 <HAL_GPIO_Init+0x2b0>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d046      	beq.n	8000f4a <HAL_GPIO_Init+0xfa>
 8000ebc:	4a90      	ldr	r2, [pc, #576]	; (8001100 <HAL_GPIO_Init+0x2b0>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d85d      	bhi.n	8000f7e <HAL_GPIO_Init+0x12e>
 8000ec2:	2b12      	cmp	r3, #18
 8000ec4:	d82a      	bhi.n	8000f1c <HAL_GPIO_Init+0xcc>
 8000ec6:	2b12      	cmp	r3, #18
 8000ec8:	d859      	bhi.n	8000f7e <HAL_GPIO_Init+0x12e>
 8000eca:	a201      	add	r2, pc, #4	; (adr r2, 8000ed0 <HAL_GPIO_Init+0x80>)
 8000ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed0:	08000f4b 	.word	0x08000f4b
 8000ed4:	08000f25 	.word	0x08000f25
 8000ed8:	08000f37 	.word	0x08000f37
 8000edc:	08000f79 	.word	0x08000f79
 8000ee0:	08000f7f 	.word	0x08000f7f
 8000ee4:	08000f7f 	.word	0x08000f7f
 8000ee8:	08000f7f 	.word	0x08000f7f
 8000eec:	08000f7f 	.word	0x08000f7f
 8000ef0:	08000f7f 	.word	0x08000f7f
 8000ef4:	08000f7f 	.word	0x08000f7f
 8000ef8:	08000f7f 	.word	0x08000f7f
 8000efc:	08000f7f 	.word	0x08000f7f
 8000f00:	08000f7f 	.word	0x08000f7f
 8000f04:	08000f7f 	.word	0x08000f7f
 8000f08:	08000f7f 	.word	0x08000f7f
 8000f0c:	08000f7f 	.word	0x08000f7f
 8000f10:	08000f7f 	.word	0x08000f7f
 8000f14:	08000f2d 	.word	0x08000f2d
 8000f18:	08000f41 	.word	0x08000f41
 8000f1c:	4a79      	ldr	r2, [pc, #484]	; (8001104 <HAL_GPIO_Init+0x2b4>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d013      	beq.n	8000f4a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f22:	e02c      	b.n	8000f7e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	623b      	str	r3, [r7, #32]
          break;
 8000f2a:	e029      	b.n	8000f80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	3304      	adds	r3, #4
 8000f32:	623b      	str	r3, [r7, #32]
          break;
 8000f34:	e024      	b.n	8000f80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	68db      	ldr	r3, [r3, #12]
 8000f3a:	3308      	adds	r3, #8
 8000f3c:	623b      	str	r3, [r7, #32]
          break;
 8000f3e:	e01f      	b.n	8000f80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	330c      	adds	r3, #12
 8000f46:	623b      	str	r3, [r7, #32]
          break;
 8000f48:	e01a      	b.n	8000f80 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d102      	bne.n	8000f58 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f52:	2304      	movs	r3, #4
 8000f54:	623b      	str	r3, [r7, #32]
          break;
 8000f56:	e013      	b.n	8000f80 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d105      	bne.n	8000f6c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f60:	2308      	movs	r3, #8
 8000f62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	69fa      	ldr	r2, [r7, #28]
 8000f68:	611a      	str	r2, [r3, #16]
          break;
 8000f6a:	e009      	b.n	8000f80 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f6c:	2308      	movs	r3, #8
 8000f6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	69fa      	ldr	r2, [r7, #28]
 8000f74:	615a      	str	r2, [r3, #20]
          break;
 8000f76:	e003      	b.n	8000f80 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	623b      	str	r3, [r7, #32]
          break;
 8000f7c:	e000      	b.n	8000f80 <HAL_GPIO_Init+0x130>
          break;
 8000f7e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	2bff      	cmp	r3, #255	; 0xff
 8000f84:	d801      	bhi.n	8000f8a <HAL_GPIO_Init+0x13a>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	e001      	b.n	8000f8e <HAL_GPIO_Init+0x13e>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	3304      	adds	r3, #4
 8000f8e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	2bff      	cmp	r3, #255	; 0xff
 8000f94:	d802      	bhi.n	8000f9c <HAL_GPIO_Init+0x14c>
 8000f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	e002      	b.n	8000fa2 <HAL_GPIO_Init+0x152>
 8000f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9e:	3b08      	subs	r3, #8
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	210f      	movs	r1, #15
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	401a      	ands	r2, r3
 8000fb4:	6a39      	ldr	r1, [r7, #32]
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fbc:	431a      	orrs	r2, r3
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	f000 80b1 	beq.w	8001132 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fd0:	4b4d      	ldr	r3, [pc, #308]	; (8001108 <HAL_GPIO_Init+0x2b8>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	4a4c      	ldr	r2, [pc, #304]	; (8001108 <HAL_GPIO_Init+0x2b8>)
 8000fd6:	f043 0301 	orr.w	r3, r3, #1
 8000fda:	6193      	str	r3, [r2, #24]
 8000fdc:	4b4a      	ldr	r3, [pc, #296]	; (8001108 <HAL_GPIO_Init+0x2b8>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fe8:	4a48      	ldr	r2, [pc, #288]	; (800110c <HAL_GPIO_Init+0x2bc>)
 8000fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fec:	089b      	lsrs	r3, r3, #2
 8000fee:	3302      	adds	r3, #2
 8000ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff8:	f003 0303 	and.w	r3, r3, #3
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	220f      	movs	r2, #15
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	4013      	ands	r3, r2
 800100a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4a40      	ldr	r2, [pc, #256]	; (8001110 <HAL_GPIO_Init+0x2c0>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d013      	beq.n	800103c <HAL_GPIO_Init+0x1ec>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4a3f      	ldr	r2, [pc, #252]	; (8001114 <HAL_GPIO_Init+0x2c4>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d00d      	beq.n	8001038 <HAL_GPIO_Init+0x1e8>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a3e      	ldr	r2, [pc, #248]	; (8001118 <HAL_GPIO_Init+0x2c8>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d007      	beq.n	8001034 <HAL_GPIO_Init+0x1e4>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4a3d      	ldr	r2, [pc, #244]	; (800111c <HAL_GPIO_Init+0x2cc>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d101      	bne.n	8001030 <HAL_GPIO_Init+0x1e0>
 800102c:	2303      	movs	r3, #3
 800102e:	e006      	b.n	800103e <HAL_GPIO_Init+0x1ee>
 8001030:	2304      	movs	r3, #4
 8001032:	e004      	b.n	800103e <HAL_GPIO_Init+0x1ee>
 8001034:	2302      	movs	r3, #2
 8001036:	e002      	b.n	800103e <HAL_GPIO_Init+0x1ee>
 8001038:	2301      	movs	r3, #1
 800103a:	e000      	b.n	800103e <HAL_GPIO_Init+0x1ee>
 800103c:	2300      	movs	r3, #0
 800103e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001040:	f002 0203 	and.w	r2, r2, #3
 8001044:	0092      	lsls	r2, r2, #2
 8001046:	4093      	lsls	r3, r2
 8001048:	68fa      	ldr	r2, [r7, #12]
 800104a:	4313      	orrs	r3, r2
 800104c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800104e:	492f      	ldr	r1, [pc, #188]	; (800110c <HAL_GPIO_Init+0x2bc>)
 8001050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001052:	089b      	lsrs	r3, r3, #2
 8001054:	3302      	adds	r3, #2
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d006      	beq.n	8001076 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001068:	4b2d      	ldr	r3, [pc, #180]	; (8001120 <HAL_GPIO_Init+0x2d0>)
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	492c      	ldr	r1, [pc, #176]	; (8001120 <HAL_GPIO_Init+0x2d0>)
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	4313      	orrs	r3, r2
 8001072:	600b      	str	r3, [r1, #0]
 8001074:	e006      	b.n	8001084 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001076:	4b2a      	ldr	r3, [pc, #168]	; (8001120 <HAL_GPIO_Init+0x2d0>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	43db      	mvns	r3, r3
 800107e:	4928      	ldr	r1, [pc, #160]	; (8001120 <HAL_GPIO_Init+0x2d0>)
 8001080:	4013      	ands	r3, r2
 8001082:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d006      	beq.n	800109e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001090:	4b23      	ldr	r3, [pc, #140]	; (8001120 <HAL_GPIO_Init+0x2d0>)
 8001092:	685a      	ldr	r2, [r3, #4]
 8001094:	4922      	ldr	r1, [pc, #136]	; (8001120 <HAL_GPIO_Init+0x2d0>)
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	4313      	orrs	r3, r2
 800109a:	604b      	str	r3, [r1, #4]
 800109c:	e006      	b.n	80010ac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800109e:	4b20      	ldr	r3, [pc, #128]	; (8001120 <HAL_GPIO_Init+0x2d0>)
 80010a0:	685a      	ldr	r2, [r3, #4]
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	43db      	mvns	r3, r3
 80010a6:	491e      	ldr	r1, [pc, #120]	; (8001120 <HAL_GPIO_Init+0x2d0>)
 80010a8:	4013      	ands	r3, r2
 80010aa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d006      	beq.n	80010c6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010b8:	4b19      	ldr	r3, [pc, #100]	; (8001120 <HAL_GPIO_Init+0x2d0>)
 80010ba:	689a      	ldr	r2, [r3, #8]
 80010bc:	4918      	ldr	r1, [pc, #96]	; (8001120 <HAL_GPIO_Init+0x2d0>)
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	608b      	str	r3, [r1, #8]
 80010c4:	e006      	b.n	80010d4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010c6:	4b16      	ldr	r3, [pc, #88]	; (8001120 <HAL_GPIO_Init+0x2d0>)
 80010c8:	689a      	ldr	r2, [r3, #8]
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	43db      	mvns	r3, r3
 80010ce:	4914      	ldr	r1, [pc, #80]	; (8001120 <HAL_GPIO_Init+0x2d0>)
 80010d0:	4013      	ands	r3, r2
 80010d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d021      	beq.n	8001124 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010e0:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <HAL_GPIO_Init+0x2d0>)
 80010e2:	68da      	ldr	r2, [r3, #12]
 80010e4:	490e      	ldr	r1, [pc, #56]	; (8001120 <HAL_GPIO_Init+0x2d0>)
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	60cb      	str	r3, [r1, #12]
 80010ec:	e021      	b.n	8001132 <HAL_GPIO_Init+0x2e2>
 80010ee:	bf00      	nop
 80010f0:	10320000 	.word	0x10320000
 80010f4:	10310000 	.word	0x10310000
 80010f8:	10220000 	.word	0x10220000
 80010fc:	10210000 	.word	0x10210000
 8001100:	10120000 	.word	0x10120000
 8001104:	10110000 	.word	0x10110000
 8001108:	40021000 	.word	0x40021000
 800110c:	40010000 	.word	0x40010000
 8001110:	40010800 	.word	0x40010800
 8001114:	40010c00 	.word	0x40010c00
 8001118:	40011000 	.word	0x40011000
 800111c:	40011400 	.word	0x40011400
 8001120:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001124:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <HAL_GPIO_Init+0x304>)
 8001126:	68da      	ldr	r2, [r3, #12]
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	43db      	mvns	r3, r3
 800112c:	4909      	ldr	r1, [pc, #36]	; (8001154 <HAL_GPIO_Init+0x304>)
 800112e:	4013      	ands	r3, r2
 8001130:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001134:	3301      	adds	r3, #1
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113e:	fa22 f303 	lsr.w	r3, r2, r3
 8001142:	2b00      	cmp	r3, #0
 8001144:	f47f ae8e 	bne.w	8000e64 <HAL_GPIO_Init+0x14>
  }
}
 8001148:	bf00      	nop
 800114a:	bf00      	nop
 800114c:	372c      	adds	r7, #44	; 0x2c
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr
 8001154:	40010400 	.word	0x40010400

08001158 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	807b      	strh	r3, [r7, #2]
 8001164:	4613      	mov	r3, r2
 8001166:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001168:	787b      	ldrb	r3, [r7, #1]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800116e:	887a      	ldrh	r2, [r7, #2]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001174:	e003      	b.n	800117e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001176:	887b      	ldrh	r3, [r7, #2]
 8001178:	041a      	lsls	r2, r3, #16
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	611a      	str	r2, [r3, #16]
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	bc80      	pop	{r7}
 8001186:	4770      	bx	lr

08001188 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001192:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001194:	695a      	ldr	r2, [r3, #20]
 8001196:	88fb      	ldrh	r3, [r7, #6]
 8001198:	4013      	ands	r3, r2
 800119a:	2b00      	cmp	r3, #0
 800119c:	d006      	beq.n	80011ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800119e:	4a05      	ldr	r2, [pc, #20]	; (80011b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011a0:	88fb      	ldrh	r3, [r7, #6]
 80011a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011a4:	88fb      	ldrh	r3, [r7, #6]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 f806 	bl	80011b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40010400 	.word	0x40010400

080011b8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr

080011cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d101      	bne.n	80011de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e272      	b.n	80016c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	f000 8087 	beq.w	80012fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011ec:	4b92      	ldr	r3, [pc, #584]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 030c 	and.w	r3, r3, #12
 80011f4:	2b04      	cmp	r3, #4
 80011f6:	d00c      	beq.n	8001212 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011f8:	4b8f      	ldr	r3, [pc, #572]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 030c 	and.w	r3, r3, #12
 8001200:	2b08      	cmp	r3, #8
 8001202:	d112      	bne.n	800122a <HAL_RCC_OscConfig+0x5e>
 8001204:	4b8c      	ldr	r3, [pc, #560]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800120c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001210:	d10b      	bne.n	800122a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001212:	4b89      	ldr	r3, [pc, #548]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d06c      	beq.n	80012f8 <HAL_RCC_OscConfig+0x12c>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d168      	bne.n	80012f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e24c      	b.n	80016c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001232:	d106      	bne.n	8001242 <HAL_RCC_OscConfig+0x76>
 8001234:	4b80      	ldr	r3, [pc, #512]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a7f      	ldr	r2, [pc, #508]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 800123a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800123e:	6013      	str	r3, [r2, #0]
 8001240:	e02e      	b.n	80012a0 <HAL_RCC_OscConfig+0xd4>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d10c      	bne.n	8001264 <HAL_RCC_OscConfig+0x98>
 800124a:	4b7b      	ldr	r3, [pc, #492]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a7a      	ldr	r2, [pc, #488]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001250:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001254:	6013      	str	r3, [r2, #0]
 8001256:	4b78      	ldr	r3, [pc, #480]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a77      	ldr	r2, [pc, #476]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 800125c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001260:	6013      	str	r3, [r2, #0]
 8001262:	e01d      	b.n	80012a0 <HAL_RCC_OscConfig+0xd4>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800126c:	d10c      	bne.n	8001288 <HAL_RCC_OscConfig+0xbc>
 800126e:	4b72      	ldr	r3, [pc, #456]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a71      	ldr	r2, [pc, #452]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001274:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001278:	6013      	str	r3, [r2, #0]
 800127a:	4b6f      	ldr	r3, [pc, #444]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a6e      	ldr	r2, [pc, #440]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001284:	6013      	str	r3, [r2, #0]
 8001286:	e00b      	b.n	80012a0 <HAL_RCC_OscConfig+0xd4>
 8001288:	4b6b      	ldr	r3, [pc, #428]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a6a      	ldr	r2, [pc, #424]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 800128e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001292:	6013      	str	r3, [r2, #0]
 8001294:	4b68      	ldr	r3, [pc, #416]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a67      	ldr	r2, [pc, #412]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 800129a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800129e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d013      	beq.n	80012d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a8:	f7ff fc96 	bl	8000bd8 <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012b0:	f7ff fc92 	bl	8000bd8 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b64      	cmp	r3, #100	; 0x64
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e200      	b.n	80016c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c2:	4b5d      	ldr	r3, [pc, #372]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d0f0      	beq.n	80012b0 <HAL_RCC_OscConfig+0xe4>
 80012ce:	e014      	b.n	80012fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d0:	f7ff fc82 	bl	8000bd8 <HAL_GetTick>
 80012d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012d6:	e008      	b.n	80012ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012d8:	f7ff fc7e 	bl	8000bd8 <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b64      	cmp	r3, #100	; 0x64
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e1ec      	b.n	80016c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ea:	4b53      	ldr	r3, [pc, #332]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1f0      	bne.n	80012d8 <HAL_RCC_OscConfig+0x10c>
 80012f6:	e000      	b.n	80012fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d063      	beq.n	80013ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001306:	4b4c      	ldr	r3, [pc, #304]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f003 030c 	and.w	r3, r3, #12
 800130e:	2b00      	cmp	r3, #0
 8001310:	d00b      	beq.n	800132a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001312:	4b49      	ldr	r3, [pc, #292]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f003 030c 	and.w	r3, r3, #12
 800131a:	2b08      	cmp	r3, #8
 800131c:	d11c      	bne.n	8001358 <HAL_RCC_OscConfig+0x18c>
 800131e:	4b46      	ldr	r3, [pc, #280]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d116      	bne.n	8001358 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800132a:	4b43      	ldr	r3, [pc, #268]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d005      	beq.n	8001342 <HAL_RCC_OscConfig+0x176>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	691b      	ldr	r3, [r3, #16]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d001      	beq.n	8001342 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e1c0      	b.n	80016c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001342:	4b3d      	ldr	r3, [pc, #244]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	695b      	ldr	r3, [r3, #20]
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	4939      	ldr	r1, [pc, #228]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001352:	4313      	orrs	r3, r2
 8001354:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001356:	e03a      	b.n	80013ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	691b      	ldr	r3, [r3, #16]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d020      	beq.n	80013a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001360:	4b36      	ldr	r3, [pc, #216]	; (800143c <HAL_RCC_OscConfig+0x270>)
 8001362:	2201      	movs	r2, #1
 8001364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001366:	f7ff fc37 	bl	8000bd8 <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800136e:	f7ff fc33 	bl	8000bd8 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e1a1      	b.n	80016c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001380:	4b2d      	ldr	r3, [pc, #180]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0302 	and.w	r3, r3, #2
 8001388:	2b00      	cmp	r3, #0
 800138a:	d0f0      	beq.n	800136e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138c:	4b2a      	ldr	r3, [pc, #168]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	695b      	ldr	r3, [r3, #20]
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	4927      	ldr	r1, [pc, #156]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 800139c:	4313      	orrs	r3, r2
 800139e:	600b      	str	r3, [r1, #0]
 80013a0:	e015      	b.n	80013ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013a2:	4b26      	ldr	r3, [pc, #152]	; (800143c <HAL_RCC_OscConfig+0x270>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a8:	f7ff fc16 	bl	8000bd8 <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013b0:	f7ff fc12 	bl	8000bd8 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e180      	b.n	80016c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013c2:	4b1d      	ldr	r3, [pc, #116]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1f0      	bne.n	80013b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0308 	and.w	r3, r3, #8
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d03a      	beq.n	8001450 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d019      	beq.n	8001416 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013e2:	4b17      	ldr	r3, [pc, #92]	; (8001440 <HAL_RCC_OscConfig+0x274>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013e8:	f7ff fbf6 	bl	8000bd8 <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013f0:	f7ff fbf2 	bl	8000bd8 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e160      	b.n	80016c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001402:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d0f0      	beq.n	80013f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800140e:	2001      	movs	r0, #1
 8001410:	f000 fad8 	bl	80019c4 <RCC_Delay>
 8001414:	e01c      	b.n	8001450 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001416:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <HAL_RCC_OscConfig+0x274>)
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800141c:	f7ff fbdc 	bl	8000bd8 <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001422:	e00f      	b.n	8001444 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001424:	f7ff fbd8 	bl	8000bd8 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d908      	bls.n	8001444 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e146      	b.n	80016c4 <HAL_RCC_OscConfig+0x4f8>
 8001436:	bf00      	nop
 8001438:	40021000 	.word	0x40021000
 800143c:	42420000 	.word	0x42420000
 8001440:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001444:	4b92      	ldr	r3, [pc, #584]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 8001446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d1e9      	bne.n	8001424 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0304 	and.w	r3, r3, #4
 8001458:	2b00      	cmp	r3, #0
 800145a:	f000 80a6 	beq.w	80015aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800145e:	2300      	movs	r3, #0
 8001460:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001462:	4b8b      	ldr	r3, [pc, #556]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d10d      	bne.n	800148a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800146e:	4b88      	ldr	r3, [pc, #544]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 8001470:	69db      	ldr	r3, [r3, #28]
 8001472:	4a87      	ldr	r2, [pc, #540]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 8001474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001478:	61d3      	str	r3, [r2, #28]
 800147a:	4b85      	ldr	r3, [pc, #532]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001486:	2301      	movs	r3, #1
 8001488:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800148a:	4b82      	ldr	r3, [pc, #520]	; (8001694 <HAL_RCC_OscConfig+0x4c8>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001492:	2b00      	cmp	r3, #0
 8001494:	d118      	bne.n	80014c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001496:	4b7f      	ldr	r3, [pc, #508]	; (8001694 <HAL_RCC_OscConfig+0x4c8>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a7e      	ldr	r2, [pc, #504]	; (8001694 <HAL_RCC_OscConfig+0x4c8>)
 800149c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014a2:	f7ff fb99 	bl	8000bd8 <HAL_GetTick>
 80014a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a8:	e008      	b.n	80014bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014aa:	f7ff fb95 	bl	8000bd8 <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b64      	cmp	r3, #100	; 0x64
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e103      	b.n	80016c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014bc:	4b75      	ldr	r3, [pc, #468]	; (8001694 <HAL_RCC_OscConfig+0x4c8>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d0f0      	beq.n	80014aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d106      	bne.n	80014de <HAL_RCC_OscConfig+0x312>
 80014d0:	4b6f      	ldr	r3, [pc, #444]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 80014d2:	6a1b      	ldr	r3, [r3, #32]
 80014d4:	4a6e      	ldr	r2, [pc, #440]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	6213      	str	r3, [r2, #32]
 80014dc:	e02d      	b.n	800153a <HAL_RCC_OscConfig+0x36e>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d10c      	bne.n	8001500 <HAL_RCC_OscConfig+0x334>
 80014e6:	4b6a      	ldr	r3, [pc, #424]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 80014e8:	6a1b      	ldr	r3, [r3, #32]
 80014ea:	4a69      	ldr	r2, [pc, #420]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 80014ec:	f023 0301 	bic.w	r3, r3, #1
 80014f0:	6213      	str	r3, [r2, #32]
 80014f2:	4b67      	ldr	r3, [pc, #412]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 80014f4:	6a1b      	ldr	r3, [r3, #32]
 80014f6:	4a66      	ldr	r2, [pc, #408]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 80014f8:	f023 0304 	bic.w	r3, r3, #4
 80014fc:	6213      	str	r3, [r2, #32]
 80014fe:	e01c      	b.n	800153a <HAL_RCC_OscConfig+0x36e>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	2b05      	cmp	r3, #5
 8001506:	d10c      	bne.n	8001522 <HAL_RCC_OscConfig+0x356>
 8001508:	4b61      	ldr	r3, [pc, #388]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 800150a:	6a1b      	ldr	r3, [r3, #32]
 800150c:	4a60      	ldr	r2, [pc, #384]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 800150e:	f043 0304 	orr.w	r3, r3, #4
 8001512:	6213      	str	r3, [r2, #32]
 8001514:	4b5e      	ldr	r3, [pc, #376]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 8001516:	6a1b      	ldr	r3, [r3, #32]
 8001518:	4a5d      	ldr	r2, [pc, #372]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 800151a:	f043 0301 	orr.w	r3, r3, #1
 800151e:	6213      	str	r3, [r2, #32]
 8001520:	e00b      	b.n	800153a <HAL_RCC_OscConfig+0x36e>
 8001522:	4b5b      	ldr	r3, [pc, #364]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 8001524:	6a1b      	ldr	r3, [r3, #32]
 8001526:	4a5a      	ldr	r2, [pc, #360]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 8001528:	f023 0301 	bic.w	r3, r3, #1
 800152c:	6213      	str	r3, [r2, #32]
 800152e:	4b58      	ldr	r3, [pc, #352]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 8001530:	6a1b      	ldr	r3, [r3, #32]
 8001532:	4a57      	ldr	r2, [pc, #348]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 8001534:	f023 0304 	bic.w	r3, r3, #4
 8001538:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d015      	beq.n	800156e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001542:	f7ff fb49 	bl	8000bd8 <HAL_GetTick>
 8001546:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001548:	e00a      	b.n	8001560 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800154a:	f7ff fb45 	bl	8000bd8 <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	f241 3288 	movw	r2, #5000	; 0x1388
 8001558:	4293      	cmp	r3, r2
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e0b1      	b.n	80016c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001560:	4b4b      	ldr	r3, [pc, #300]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 8001562:	6a1b      	ldr	r3, [r3, #32]
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d0ee      	beq.n	800154a <HAL_RCC_OscConfig+0x37e>
 800156c:	e014      	b.n	8001598 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800156e:	f7ff fb33 	bl	8000bd8 <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001574:	e00a      	b.n	800158c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001576:	f7ff fb2f 	bl	8000bd8 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	f241 3288 	movw	r2, #5000	; 0x1388
 8001584:	4293      	cmp	r3, r2
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e09b      	b.n	80016c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800158c:	4b40      	ldr	r3, [pc, #256]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 800158e:	6a1b      	ldr	r3, [r3, #32]
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1ee      	bne.n	8001576 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001598:	7dfb      	ldrb	r3, [r7, #23]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d105      	bne.n	80015aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800159e:	4b3c      	ldr	r3, [pc, #240]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	4a3b      	ldr	r2, [pc, #236]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 80015a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	69db      	ldr	r3, [r3, #28]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f000 8087 	beq.w	80016c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015b4:	4b36      	ldr	r3, [pc, #216]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 030c 	and.w	r3, r3, #12
 80015bc:	2b08      	cmp	r3, #8
 80015be:	d061      	beq.n	8001684 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	69db      	ldr	r3, [r3, #28]
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d146      	bne.n	8001656 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015c8:	4b33      	ldr	r3, [pc, #204]	; (8001698 <HAL_RCC_OscConfig+0x4cc>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ce:	f7ff fb03 	bl	8000bd8 <HAL_GetTick>
 80015d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015d6:	f7ff faff 	bl	8000bd8 <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e06d      	b.n	80016c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015e8:	4b29      	ldr	r3, [pc, #164]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1f0      	bne.n	80015d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a1b      	ldr	r3, [r3, #32]
 80015f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015fc:	d108      	bne.n	8001610 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015fe:	4b24      	ldr	r3, [pc, #144]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	4921      	ldr	r1, [pc, #132]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 800160c:	4313      	orrs	r3, r2
 800160e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001610:	4b1f      	ldr	r3, [pc, #124]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a19      	ldr	r1, [r3, #32]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001620:	430b      	orrs	r3, r1
 8001622:	491b      	ldr	r1, [pc, #108]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 8001624:	4313      	orrs	r3, r2
 8001626:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001628:	4b1b      	ldr	r3, [pc, #108]	; (8001698 <HAL_RCC_OscConfig+0x4cc>)
 800162a:	2201      	movs	r2, #1
 800162c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162e:	f7ff fad3 	bl	8000bd8 <HAL_GetTick>
 8001632:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001634:	e008      	b.n	8001648 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001636:	f7ff facf 	bl	8000bd8 <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	2b02      	cmp	r3, #2
 8001642:	d901      	bls.n	8001648 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e03d      	b.n	80016c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d0f0      	beq.n	8001636 <HAL_RCC_OscConfig+0x46a>
 8001654:	e035      	b.n	80016c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001656:	4b10      	ldr	r3, [pc, #64]	; (8001698 <HAL_RCC_OscConfig+0x4cc>)
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165c:	f7ff fabc 	bl	8000bd8 <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001664:	f7ff fab8 	bl	8000bd8 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e026      	b.n	80016c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001676:	4b06      	ldr	r3, [pc, #24]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1f0      	bne.n	8001664 <HAL_RCC_OscConfig+0x498>
 8001682:	e01e      	b.n	80016c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	69db      	ldr	r3, [r3, #28]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d107      	bne.n	800169c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e019      	b.n	80016c4 <HAL_RCC_OscConfig+0x4f8>
 8001690:	40021000 	.word	0x40021000
 8001694:	40007000 	.word	0x40007000
 8001698:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800169c:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <HAL_RCC_OscConfig+0x500>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a1b      	ldr	r3, [r3, #32]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d106      	bne.n	80016be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d001      	beq.n	80016c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e000      	b.n	80016c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3718      	adds	r7, #24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40021000 	.word	0x40021000

080016d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d101      	bne.n	80016e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e0d0      	b.n	8001886 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016e4:	4b6a      	ldr	r3, [pc, #424]	; (8001890 <HAL_RCC_ClockConfig+0x1c0>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0307 	and.w	r3, r3, #7
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d910      	bls.n	8001714 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016f2:	4b67      	ldr	r3, [pc, #412]	; (8001890 <HAL_RCC_ClockConfig+0x1c0>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f023 0207 	bic.w	r2, r3, #7
 80016fa:	4965      	ldr	r1, [pc, #404]	; (8001890 <HAL_RCC_ClockConfig+0x1c0>)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	4313      	orrs	r3, r2
 8001700:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001702:	4b63      	ldr	r3, [pc, #396]	; (8001890 <HAL_RCC_ClockConfig+0x1c0>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	683a      	ldr	r2, [r7, #0]
 800170c:	429a      	cmp	r2, r3
 800170e:	d001      	beq.n	8001714 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e0b8      	b.n	8001886 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d020      	beq.n	8001762 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0304 	and.w	r3, r3, #4
 8001728:	2b00      	cmp	r3, #0
 800172a:	d005      	beq.n	8001738 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800172c:	4b59      	ldr	r3, [pc, #356]	; (8001894 <HAL_RCC_ClockConfig+0x1c4>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	4a58      	ldr	r2, [pc, #352]	; (8001894 <HAL_RCC_ClockConfig+0x1c4>)
 8001732:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001736:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0308 	and.w	r3, r3, #8
 8001740:	2b00      	cmp	r3, #0
 8001742:	d005      	beq.n	8001750 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001744:	4b53      	ldr	r3, [pc, #332]	; (8001894 <HAL_RCC_ClockConfig+0x1c4>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	4a52      	ldr	r2, [pc, #328]	; (8001894 <HAL_RCC_ClockConfig+0x1c4>)
 800174a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800174e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001750:	4b50      	ldr	r3, [pc, #320]	; (8001894 <HAL_RCC_ClockConfig+0x1c4>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	494d      	ldr	r1, [pc, #308]	; (8001894 <HAL_RCC_ClockConfig+0x1c4>)
 800175e:	4313      	orrs	r3, r2
 8001760:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	2b00      	cmp	r3, #0
 800176c:	d040      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d107      	bne.n	8001786 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001776:	4b47      	ldr	r3, [pc, #284]	; (8001894 <HAL_RCC_ClockConfig+0x1c4>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d115      	bne.n	80017ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e07f      	b.n	8001886 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b02      	cmp	r3, #2
 800178c:	d107      	bne.n	800179e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800178e:	4b41      	ldr	r3, [pc, #260]	; (8001894 <HAL_RCC_ClockConfig+0x1c4>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d109      	bne.n	80017ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e073      	b.n	8001886 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800179e:	4b3d      	ldr	r3, [pc, #244]	; (8001894 <HAL_RCC_ClockConfig+0x1c4>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d101      	bne.n	80017ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e06b      	b.n	8001886 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ae:	4b39      	ldr	r3, [pc, #228]	; (8001894 <HAL_RCC_ClockConfig+0x1c4>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f023 0203 	bic.w	r2, r3, #3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	4936      	ldr	r1, [pc, #216]	; (8001894 <HAL_RCC_ClockConfig+0x1c4>)
 80017bc:	4313      	orrs	r3, r2
 80017be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017c0:	f7ff fa0a 	bl	8000bd8 <HAL_GetTick>
 80017c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017c6:	e00a      	b.n	80017de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017c8:	f7ff fa06 	bl	8000bd8 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e053      	b.n	8001886 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017de:	4b2d      	ldr	r3, [pc, #180]	; (8001894 <HAL_RCC_ClockConfig+0x1c4>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f003 020c 	and.w	r2, r3, #12
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d1eb      	bne.n	80017c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017f0:	4b27      	ldr	r3, [pc, #156]	; (8001890 <HAL_RCC_ClockConfig+0x1c0>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0307 	and.w	r3, r3, #7
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d210      	bcs.n	8001820 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017fe:	4b24      	ldr	r3, [pc, #144]	; (8001890 <HAL_RCC_ClockConfig+0x1c0>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f023 0207 	bic.w	r2, r3, #7
 8001806:	4922      	ldr	r1, [pc, #136]	; (8001890 <HAL_RCC_ClockConfig+0x1c0>)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	4313      	orrs	r3, r2
 800180c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800180e:	4b20      	ldr	r3, [pc, #128]	; (8001890 <HAL_RCC_ClockConfig+0x1c0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	683a      	ldr	r2, [r7, #0]
 8001818:	429a      	cmp	r2, r3
 800181a:	d001      	beq.n	8001820 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e032      	b.n	8001886 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	2b00      	cmp	r3, #0
 800182a:	d008      	beq.n	800183e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800182c:	4b19      	ldr	r3, [pc, #100]	; (8001894 <HAL_RCC_ClockConfig+0x1c4>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	4916      	ldr	r1, [pc, #88]	; (8001894 <HAL_RCC_ClockConfig+0x1c4>)
 800183a:	4313      	orrs	r3, r2
 800183c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0308 	and.w	r3, r3, #8
 8001846:	2b00      	cmp	r3, #0
 8001848:	d009      	beq.n	800185e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800184a:	4b12      	ldr	r3, [pc, #72]	; (8001894 <HAL_RCC_ClockConfig+0x1c4>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	490e      	ldr	r1, [pc, #56]	; (8001894 <HAL_RCC_ClockConfig+0x1c4>)
 800185a:	4313      	orrs	r3, r2
 800185c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800185e:	f000 f821 	bl	80018a4 <HAL_RCC_GetSysClockFreq>
 8001862:	4602      	mov	r2, r0
 8001864:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <HAL_RCC_ClockConfig+0x1c4>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	091b      	lsrs	r3, r3, #4
 800186a:	f003 030f 	and.w	r3, r3, #15
 800186e:	490a      	ldr	r1, [pc, #40]	; (8001898 <HAL_RCC_ClockConfig+0x1c8>)
 8001870:	5ccb      	ldrb	r3, [r1, r3]
 8001872:	fa22 f303 	lsr.w	r3, r2, r3
 8001876:	4a09      	ldr	r2, [pc, #36]	; (800189c <HAL_RCC_ClockConfig+0x1cc>)
 8001878:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800187a:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <HAL_RCC_ClockConfig+0x1d0>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff f968 	bl	8000b54 <HAL_InitTick>

  return HAL_OK;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40022000 	.word	0x40022000
 8001894:	40021000 	.word	0x40021000
 8001898:	08003504 	.word	0x08003504
 800189c:	20000208 	.word	0x20000208
 80018a0:	2000020c 	.word	0x2000020c

080018a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018a4:	b490      	push	{r4, r7}
 80018a6:	b08a      	sub	sp, #40	; 0x28
 80018a8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80018aa:	4b29      	ldr	r3, [pc, #164]	; (8001950 <HAL_RCC_GetSysClockFreq+0xac>)
 80018ac:	1d3c      	adds	r4, r7, #4
 80018ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80018b4:	f240 2301 	movw	r3, #513	; 0x201
 80018b8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018ba:	2300      	movs	r3, #0
 80018bc:	61fb      	str	r3, [r7, #28]
 80018be:	2300      	movs	r3, #0
 80018c0:	61bb      	str	r3, [r7, #24]
 80018c2:	2300      	movs	r3, #0
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
 80018c6:	2300      	movs	r3, #0
 80018c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80018ca:	2300      	movs	r3, #0
 80018cc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80018ce:	4b21      	ldr	r3, [pc, #132]	; (8001954 <HAL_RCC_GetSysClockFreq+0xb0>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f003 030c 	and.w	r3, r3, #12
 80018da:	2b04      	cmp	r3, #4
 80018dc:	d002      	beq.n	80018e4 <HAL_RCC_GetSysClockFreq+0x40>
 80018de:	2b08      	cmp	r3, #8
 80018e0:	d003      	beq.n	80018ea <HAL_RCC_GetSysClockFreq+0x46>
 80018e2:	e02b      	b.n	800193c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018e4:	4b1c      	ldr	r3, [pc, #112]	; (8001958 <HAL_RCC_GetSysClockFreq+0xb4>)
 80018e6:	623b      	str	r3, [r7, #32]
      break;
 80018e8:	e02b      	b.n	8001942 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	0c9b      	lsrs	r3, r3, #18
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	3328      	adds	r3, #40	; 0x28
 80018f4:	443b      	add	r3, r7
 80018f6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80018fa:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d012      	beq.n	800192c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001906:	4b13      	ldr	r3, [pc, #76]	; (8001954 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	0c5b      	lsrs	r3, r3, #17
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	3328      	adds	r3, #40	; 0x28
 8001912:	443b      	add	r3, r7
 8001914:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001918:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	4a0e      	ldr	r2, [pc, #56]	; (8001958 <HAL_RCC_GetSysClockFreq+0xb4>)
 800191e:	fb03 f202 	mul.w	r2, r3, r2
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	fbb2 f3f3 	udiv	r3, r2, r3
 8001928:	627b      	str	r3, [r7, #36]	; 0x24
 800192a:	e004      	b.n	8001936 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	4a0b      	ldr	r2, [pc, #44]	; (800195c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001930:	fb02 f303 	mul.w	r3, r2, r3
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	623b      	str	r3, [r7, #32]
      break;
 800193a:	e002      	b.n	8001942 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800193c:	4b06      	ldr	r3, [pc, #24]	; (8001958 <HAL_RCC_GetSysClockFreq+0xb4>)
 800193e:	623b      	str	r3, [r7, #32]
      break;
 8001940:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001942:	6a3b      	ldr	r3, [r7, #32]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3728      	adds	r7, #40	; 0x28
 8001948:	46bd      	mov	sp, r7
 800194a:	bc90      	pop	{r4, r7}
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	080034f4 	.word	0x080034f4
 8001954:	40021000 	.word	0x40021000
 8001958:	007a1200 	.word	0x007a1200
 800195c:	003d0900 	.word	0x003d0900

08001960 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001964:	4b02      	ldr	r3, [pc, #8]	; (8001970 <HAL_RCC_GetHCLKFreq+0x10>)
 8001966:	681b      	ldr	r3, [r3, #0]
}
 8001968:	4618      	mov	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr
 8001970:	20000208 	.word	0x20000208

08001974 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001978:	f7ff fff2 	bl	8001960 <HAL_RCC_GetHCLKFreq>
 800197c:	4602      	mov	r2, r0
 800197e:	4b05      	ldr	r3, [pc, #20]	; (8001994 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	0a1b      	lsrs	r3, r3, #8
 8001984:	f003 0307 	and.w	r3, r3, #7
 8001988:	4903      	ldr	r1, [pc, #12]	; (8001998 <HAL_RCC_GetPCLK1Freq+0x24>)
 800198a:	5ccb      	ldrb	r3, [r1, r3]
 800198c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001990:	4618      	mov	r0, r3
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40021000 	.word	0x40021000
 8001998:	08003514 	.word	0x08003514

0800199c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019a0:	f7ff ffde 	bl	8001960 <HAL_RCC_GetHCLKFreq>
 80019a4:	4602      	mov	r2, r0
 80019a6:	4b05      	ldr	r3, [pc, #20]	; (80019bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	0adb      	lsrs	r3, r3, #11
 80019ac:	f003 0307 	and.w	r3, r3, #7
 80019b0:	4903      	ldr	r1, [pc, #12]	; (80019c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019b2:	5ccb      	ldrb	r3, [r1, r3]
 80019b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40021000 	.word	0x40021000
 80019c0:	08003514 	.word	0x08003514

080019c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019cc:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <RCC_Delay+0x34>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a0a      	ldr	r2, [pc, #40]	; (80019fc <RCC_Delay+0x38>)
 80019d2:	fba2 2303 	umull	r2, r3, r2, r3
 80019d6:	0a5b      	lsrs	r3, r3, #9
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	fb02 f303 	mul.w	r3, r2, r3
 80019de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019e0:	bf00      	nop
  }
  while (Delay --);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	1e5a      	subs	r2, r3, #1
 80019e6:	60fa      	str	r2, [r7, #12]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d1f9      	bne.n	80019e0 <RCC_Delay+0x1c>
}
 80019ec:	bf00      	nop
 80019ee:	bf00      	nop
 80019f0:	3714      	adds	r7, #20
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr
 80019f8:	20000208 	.word	0x20000208
 80019fc:	10624dd3 	.word	0x10624dd3

08001a00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e076      	b.n	8001b00 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d108      	bne.n	8001a2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001a22:	d009      	beq.n	8001a38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	61da      	str	r2, [r3, #28]
 8001a2a:	e005      	b.n	8001a38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d106      	bne.n	8001a58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7fe fd94 	bl	8000580 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a6e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001a80:	431a      	orrs	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a8a:	431a      	orrs	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	431a      	orrs	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	431a      	orrs	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ab2:	431a      	orrs	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001abc:	ea42 0103 	orr.w	r1, r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	430a      	orrs	r2, r1
 8001ace:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	0c1a      	lsrs	r2, r3, #16
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f002 0204 	and.w	r2, r2, #4
 8001ade:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	69da      	ldr	r2, [r3, #28]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001aee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2201      	movs	r2, #1
 8001afa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e041      	b.n	8001b9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d106      	bne.n	8001b34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7fe fefa 	bl	8000928 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2202      	movs	r2, #2
 8001b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3304      	adds	r3, #4
 8001b44:	4619      	mov	r1, r3
 8001b46:	4610      	mov	r0, r2
 8001b48:	f000 fb3a 	bl	80021c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
	...

08001ba8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d001      	beq.n	8001bc0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e032      	b.n	8001c26 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2202      	movs	r2, #2
 8001bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a18      	ldr	r2, [pc, #96]	; (8001c30 <HAL_TIM_Base_Start+0x88>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d00e      	beq.n	8001bf0 <HAL_TIM_Base_Start+0x48>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bda:	d009      	beq.n	8001bf0 <HAL_TIM_Base_Start+0x48>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a14      	ldr	r2, [pc, #80]	; (8001c34 <HAL_TIM_Base_Start+0x8c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d004      	beq.n	8001bf0 <HAL_TIM_Base_Start+0x48>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a13      	ldr	r2, [pc, #76]	; (8001c38 <HAL_TIM_Base_Start+0x90>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d111      	bne.n	8001c14 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2b06      	cmp	r3, #6
 8001c00:	d010      	beq.n	8001c24 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f042 0201 	orr.w	r2, r2, #1
 8001c10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c12:	e007      	b.n	8001c24 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f042 0201 	orr.w	r2, r2, #1
 8001c22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3714      	adds	r7, #20
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bc80      	pop	{r7}
 8001c2e:	4770      	bx	lr
 8001c30:	40012c00 	.word	0x40012c00
 8001c34:	40000400 	.word	0x40000400
 8001c38:	40000800 	.word	0x40000800

08001c3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e041      	b.n	8001cd2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d106      	bne.n	8001c68 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f839 	bl	8001cda <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3304      	adds	r3, #4
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	f000 faa0 	bl	80021c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr

08001cec <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d109      	bne.n	8001d10 <HAL_TIM_PWM_Start_IT+0x24>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	bf14      	ite	ne
 8001d08:	2301      	movne	r3, #1
 8001d0a:	2300      	moveq	r3, #0
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	e022      	b.n	8001d56 <HAL_TIM_PWM_Start_IT+0x6a>
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	2b04      	cmp	r3, #4
 8001d14:	d109      	bne.n	8001d2a <HAL_TIM_PWM_Start_IT+0x3e>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	bf14      	ite	ne
 8001d22:	2301      	movne	r3, #1
 8001d24:	2300      	moveq	r3, #0
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	e015      	b.n	8001d56 <HAL_TIM_PWM_Start_IT+0x6a>
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	2b08      	cmp	r3, #8
 8001d2e:	d109      	bne.n	8001d44 <HAL_TIM_PWM_Start_IT+0x58>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	bf14      	ite	ne
 8001d3c:	2301      	movne	r3, #1
 8001d3e:	2300      	moveq	r3, #0
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	e008      	b.n	8001d56 <HAL_TIM_PWM_Start_IT+0x6a>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	bf14      	ite	ne
 8001d50:	2301      	movne	r3, #1
 8001d52:	2300      	moveq	r3, #0
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e0a4      	b.n	8001ea8 <HAL_TIM_PWM_Start_IT+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d104      	bne.n	8001d6e <HAL_TIM_PWM_Start_IT+0x82>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2202      	movs	r2, #2
 8001d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d6c:	e013      	b.n	8001d96 <HAL_TIM_PWM_Start_IT+0xaa>
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	2b04      	cmp	r3, #4
 8001d72:	d104      	bne.n	8001d7e <HAL_TIM_PWM_Start_IT+0x92>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2202      	movs	r2, #2
 8001d78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d7c:	e00b      	b.n	8001d96 <HAL_TIM_PWM_Start_IT+0xaa>
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	2b08      	cmp	r3, #8
 8001d82:	d104      	bne.n	8001d8e <HAL_TIM_PWM_Start_IT+0xa2>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2202      	movs	r2, #2
 8001d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d8c:	e003      	b.n	8001d96 <HAL_TIM_PWM_Start_IT+0xaa>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2202      	movs	r2, #2
 8001d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	2b0c      	cmp	r3, #12
 8001d9a:	d841      	bhi.n	8001e20 <HAL_TIM_PWM_Start_IT+0x134>
 8001d9c:	a201      	add	r2, pc, #4	; (adr r2, 8001da4 <HAL_TIM_PWM_Start_IT+0xb8>)
 8001d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da2:	bf00      	nop
 8001da4:	08001dd9 	.word	0x08001dd9
 8001da8:	08001e21 	.word	0x08001e21
 8001dac:	08001e21 	.word	0x08001e21
 8001db0:	08001e21 	.word	0x08001e21
 8001db4:	08001deb 	.word	0x08001deb
 8001db8:	08001e21 	.word	0x08001e21
 8001dbc:	08001e21 	.word	0x08001e21
 8001dc0:	08001e21 	.word	0x08001e21
 8001dc4:	08001dfd 	.word	0x08001dfd
 8001dc8:	08001e21 	.word	0x08001e21
 8001dcc:	08001e21 	.word	0x08001e21
 8001dd0:	08001e21 	.word	0x08001e21
 8001dd4:	08001e0f 	.word	0x08001e0f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68da      	ldr	r2, [r3, #12]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f042 0202 	orr.w	r2, r2, #2
 8001de6:	60da      	str	r2, [r3, #12]
      break;
 8001de8:	e01b      	b.n	8001e22 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68da      	ldr	r2, [r3, #12]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f042 0204 	orr.w	r2, r2, #4
 8001df8:	60da      	str	r2, [r3, #12]
      break;
 8001dfa:	e012      	b.n	8001e22 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68da      	ldr	r2, [r3, #12]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f042 0208 	orr.w	r2, r2, #8
 8001e0a:	60da      	str	r2, [r3, #12]
      break;
 8001e0c:	e009      	b.n	8001e22 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f042 0210 	orr.w	r2, r2, #16
 8001e1c:	60da      	str	r2, [r3, #12]
      break;
 8001e1e:	e000      	b.n	8001e22 <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 8001e20:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2201      	movs	r2, #1
 8001e28:	6839      	ldr	r1, [r7, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f000 fc48 	bl	80026c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a1e      	ldr	r2, [pc, #120]	; (8001eb0 <HAL_TIM_PWM_Start_IT+0x1c4>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d107      	bne.n	8001e4a <HAL_TIM_PWM_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a18      	ldr	r2, [pc, #96]	; (8001eb0 <HAL_TIM_PWM_Start_IT+0x1c4>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d00e      	beq.n	8001e72 <HAL_TIM_PWM_Start_IT+0x186>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e5c:	d009      	beq.n	8001e72 <HAL_TIM_PWM_Start_IT+0x186>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a14      	ldr	r2, [pc, #80]	; (8001eb4 <HAL_TIM_PWM_Start_IT+0x1c8>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d004      	beq.n	8001e72 <HAL_TIM_PWM_Start_IT+0x186>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a12      	ldr	r2, [pc, #72]	; (8001eb8 <HAL_TIM_PWM_Start_IT+0x1cc>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d111      	bne.n	8001e96 <HAL_TIM_PWM_Start_IT+0x1aa>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f003 0307 	and.w	r3, r3, #7
 8001e7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2b06      	cmp	r3, #6
 8001e82:	d010      	beq.n	8001ea6 <HAL_TIM_PWM_Start_IT+0x1ba>
    {
      __HAL_TIM_ENABLE(htim);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f042 0201 	orr.w	r2, r2, #1
 8001e92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e94:	e007      	b.n	8001ea6 <HAL_TIM_PWM_Start_IT+0x1ba>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f042 0201 	orr.w	r2, r2, #1
 8001ea4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40012c00 	.word	0x40012c00
 8001eb4:	40000400 	.word	0x40000400
 8001eb8:	40000800 	.word	0x40000800

08001ebc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d101      	bne.n	8001ed6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	e0ac      	b.n	8002030 <HAL_TIM_PWM_ConfigChannel+0x174>
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b0c      	cmp	r3, #12
 8001ee2:	f200 809f 	bhi.w	8002024 <HAL_TIM_PWM_ConfigChannel+0x168>
 8001ee6:	a201      	add	r2, pc, #4	; (adr r2, 8001eec <HAL_TIM_PWM_ConfigChannel+0x30>)
 8001ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eec:	08001f21 	.word	0x08001f21
 8001ef0:	08002025 	.word	0x08002025
 8001ef4:	08002025 	.word	0x08002025
 8001ef8:	08002025 	.word	0x08002025
 8001efc:	08001f61 	.word	0x08001f61
 8001f00:	08002025 	.word	0x08002025
 8001f04:	08002025 	.word	0x08002025
 8001f08:	08002025 	.word	0x08002025
 8001f0c:	08001fa3 	.word	0x08001fa3
 8001f10:	08002025 	.word	0x08002025
 8001f14:	08002025 	.word	0x08002025
 8001f18:	08002025 	.word	0x08002025
 8001f1c:	08001fe3 	.word	0x08001fe3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68b9      	ldr	r1, [r7, #8]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f000 f9ac 	bl	8002284 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	699a      	ldr	r2, [r3, #24]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f042 0208 	orr.w	r2, r2, #8
 8001f3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	699a      	ldr	r2, [r3, #24]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f022 0204 	bic.w	r2, r2, #4
 8001f4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6999      	ldr	r1, [r3, #24]
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	691a      	ldr	r2, [r3, #16]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	619a      	str	r2, [r3, #24]
      break;
 8001f5e:	e062      	b.n	8002026 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68b9      	ldr	r1, [r7, #8]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f000 f9f2 	bl	8002350 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	699a      	ldr	r2, [r3, #24]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	699a      	ldr	r2, [r3, #24]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6999      	ldr	r1, [r3, #24]
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	021a      	lsls	r2, r3, #8
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	619a      	str	r2, [r3, #24]
      break;
 8001fa0:	e041      	b.n	8002026 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68b9      	ldr	r1, [r7, #8]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f000 fa3b 	bl	8002424 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	69da      	ldr	r2, [r3, #28]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f042 0208 	orr.w	r2, r2, #8
 8001fbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	69da      	ldr	r2, [r3, #28]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 0204 	bic.w	r2, r2, #4
 8001fcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	69d9      	ldr	r1, [r3, #28]
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	691a      	ldr	r2, [r3, #16]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	61da      	str	r2, [r3, #28]
      break;
 8001fe0:	e021      	b.n	8002026 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68b9      	ldr	r1, [r7, #8]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f000 fa85 	bl	80024f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	69da      	ldr	r2, [r3, #28]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ffc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	69da      	ldr	r2, [r3, #28]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800200c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	69d9      	ldr	r1, [r3, #28]
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	021a      	lsls	r2, r3, #8
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	430a      	orrs	r2, r1
 8002020:	61da      	str	r2, [r3, #28]
      break;
 8002022:	e000      	b.n	8002026 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002024:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	3710      	adds	r7, #16
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002048:	2b01      	cmp	r3, #1
 800204a:	d101      	bne.n	8002050 <HAL_TIM_ConfigClockSource+0x18>
 800204c:	2302      	movs	r3, #2
 800204e:	e0b3      	b.n	80021b8 <HAL_TIM_ConfigClockSource+0x180>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2202      	movs	r2, #2
 800205c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800206e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002076:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002088:	d03e      	beq.n	8002108 <HAL_TIM_ConfigClockSource+0xd0>
 800208a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800208e:	f200 8087 	bhi.w	80021a0 <HAL_TIM_ConfigClockSource+0x168>
 8002092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002096:	f000 8085 	beq.w	80021a4 <HAL_TIM_ConfigClockSource+0x16c>
 800209a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800209e:	d87f      	bhi.n	80021a0 <HAL_TIM_ConfigClockSource+0x168>
 80020a0:	2b70      	cmp	r3, #112	; 0x70
 80020a2:	d01a      	beq.n	80020da <HAL_TIM_ConfigClockSource+0xa2>
 80020a4:	2b70      	cmp	r3, #112	; 0x70
 80020a6:	d87b      	bhi.n	80021a0 <HAL_TIM_ConfigClockSource+0x168>
 80020a8:	2b60      	cmp	r3, #96	; 0x60
 80020aa:	d050      	beq.n	800214e <HAL_TIM_ConfigClockSource+0x116>
 80020ac:	2b60      	cmp	r3, #96	; 0x60
 80020ae:	d877      	bhi.n	80021a0 <HAL_TIM_ConfigClockSource+0x168>
 80020b0:	2b50      	cmp	r3, #80	; 0x50
 80020b2:	d03c      	beq.n	800212e <HAL_TIM_ConfigClockSource+0xf6>
 80020b4:	2b50      	cmp	r3, #80	; 0x50
 80020b6:	d873      	bhi.n	80021a0 <HAL_TIM_ConfigClockSource+0x168>
 80020b8:	2b40      	cmp	r3, #64	; 0x40
 80020ba:	d058      	beq.n	800216e <HAL_TIM_ConfigClockSource+0x136>
 80020bc:	2b40      	cmp	r3, #64	; 0x40
 80020be:	d86f      	bhi.n	80021a0 <HAL_TIM_ConfigClockSource+0x168>
 80020c0:	2b30      	cmp	r3, #48	; 0x30
 80020c2:	d064      	beq.n	800218e <HAL_TIM_ConfigClockSource+0x156>
 80020c4:	2b30      	cmp	r3, #48	; 0x30
 80020c6:	d86b      	bhi.n	80021a0 <HAL_TIM_ConfigClockSource+0x168>
 80020c8:	2b20      	cmp	r3, #32
 80020ca:	d060      	beq.n	800218e <HAL_TIM_ConfigClockSource+0x156>
 80020cc:	2b20      	cmp	r3, #32
 80020ce:	d867      	bhi.n	80021a0 <HAL_TIM_ConfigClockSource+0x168>
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d05c      	beq.n	800218e <HAL_TIM_ConfigClockSource+0x156>
 80020d4:	2b10      	cmp	r3, #16
 80020d6:	d05a      	beq.n	800218e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80020d8:	e062      	b.n	80021a0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6818      	ldr	r0, [r3, #0]
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	6899      	ldr	r1, [r3, #8]
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	f000 faca 	bl	8002682 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80020fc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	609a      	str	r2, [r3, #8]
      break;
 8002106:	e04e      	b.n	80021a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6818      	ldr	r0, [r3, #0]
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	6899      	ldr	r1, [r3, #8]
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685a      	ldr	r2, [r3, #4]
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	f000 fab3 	bl	8002682 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689a      	ldr	r2, [r3, #8]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800212a:	609a      	str	r2, [r3, #8]
      break;
 800212c:	e03b      	b.n	80021a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6818      	ldr	r0, [r3, #0]
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	6859      	ldr	r1, [r3, #4]
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	461a      	mov	r2, r3
 800213c:	f000 fa2a 	bl	8002594 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2150      	movs	r1, #80	; 0x50
 8002146:	4618      	mov	r0, r3
 8002148:	f000 fa81 	bl	800264e <TIM_ITRx_SetConfig>
      break;
 800214c:	e02b      	b.n	80021a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6818      	ldr	r0, [r3, #0]
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	6859      	ldr	r1, [r3, #4]
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	461a      	mov	r2, r3
 800215c:	f000 fa48 	bl	80025f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2160      	movs	r1, #96	; 0x60
 8002166:	4618      	mov	r0, r3
 8002168:	f000 fa71 	bl	800264e <TIM_ITRx_SetConfig>
      break;
 800216c:	e01b      	b.n	80021a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6818      	ldr	r0, [r3, #0]
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	6859      	ldr	r1, [r3, #4]
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	461a      	mov	r2, r3
 800217c:	f000 fa0a 	bl	8002594 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2140      	movs	r1, #64	; 0x40
 8002186:	4618      	mov	r0, r3
 8002188:	f000 fa61 	bl	800264e <TIM_ITRx_SetConfig>
      break;
 800218c:	e00b      	b.n	80021a6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4619      	mov	r1, r3
 8002198:	4610      	mov	r0, r2
 800219a:	f000 fa58 	bl	800264e <TIM_ITRx_SetConfig>
        break;
 800219e:	e002      	b.n	80021a6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80021a0:	bf00      	nop
 80021a2:	e000      	b.n	80021a6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80021a4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a29      	ldr	r2, [pc, #164]	; (8002278 <TIM_Base_SetConfig+0xb8>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d00b      	beq.n	80021f0 <TIM_Base_SetConfig+0x30>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021de:	d007      	beq.n	80021f0 <TIM_Base_SetConfig+0x30>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a26      	ldr	r2, [pc, #152]	; (800227c <TIM_Base_SetConfig+0xbc>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d003      	beq.n	80021f0 <TIM_Base_SetConfig+0x30>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a25      	ldr	r2, [pc, #148]	; (8002280 <TIM_Base_SetConfig+0xc0>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d108      	bne.n	8002202 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	4313      	orrs	r3, r2
 8002200:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a1c      	ldr	r2, [pc, #112]	; (8002278 <TIM_Base_SetConfig+0xb8>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d00b      	beq.n	8002222 <TIM_Base_SetConfig+0x62>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002210:	d007      	beq.n	8002222 <TIM_Base_SetConfig+0x62>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a19      	ldr	r2, [pc, #100]	; (800227c <TIM_Base_SetConfig+0xbc>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d003      	beq.n	8002222 <TIM_Base_SetConfig+0x62>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a18      	ldr	r2, [pc, #96]	; (8002280 <TIM_Base_SetConfig+0xc0>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d108      	bne.n	8002234 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002228:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	4313      	orrs	r3, r2
 8002232:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	4313      	orrs	r3, r2
 8002240:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a07      	ldr	r2, [pc, #28]	; (8002278 <TIM_Base_SetConfig+0xb8>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d103      	bne.n	8002268 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	691a      	ldr	r2, [r3, #16]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	615a      	str	r2, [r3, #20]
}
 800226e:	bf00      	nop
 8002270:	3714      	adds	r7, #20
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr
 8002278:	40012c00 	.word	0x40012c00
 800227c:	40000400 	.word	0x40000400
 8002280:	40000800 	.word	0x40000800

08002284 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002284:	b480      	push	{r7}
 8002286:	b087      	sub	sp, #28
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	f023 0201 	bic.w	r2, r3, #1
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f023 0303 	bic.w	r3, r3, #3
 80022ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	f023 0302 	bic.w	r3, r3, #2
 80022cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4a1c      	ldr	r2, [pc, #112]	; (800234c <TIM_OC1_SetConfig+0xc8>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d10c      	bne.n	80022fa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	f023 0308 	bic.w	r3, r3, #8
 80022e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	f023 0304 	bic.w	r3, r3, #4
 80022f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a13      	ldr	r2, [pc, #76]	; (800234c <TIM_OC1_SetConfig+0xc8>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d111      	bne.n	8002326 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002308:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002310:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	4313      	orrs	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	4313      	orrs	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685a      	ldr	r2, [r3, #4]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	697a      	ldr	r2, [r7, #20]
 800233e:	621a      	str	r2, [r3, #32]
}
 8002340:	bf00      	nop
 8002342:	371c      	adds	r7, #28
 8002344:	46bd      	mov	sp, r7
 8002346:	bc80      	pop	{r7}
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	40012c00 	.word	0x40012c00

08002350 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002350:	b480      	push	{r7}
 8002352:	b087      	sub	sp, #28
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	f023 0210 	bic.w	r2, r3, #16
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800237e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002386:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	021b      	lsls	r3, r3, #8
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	4313      	orrs	r3, r2
 8002392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	f023 0320 	bic.w	r3, r3, #32
 800239a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	011b      	lsls	r3, r3, #4
 80023a2:	697a      	ldr	r2, [r7, #20]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a1d      	ldr	r2, [pc, #116]	; (8002420 <TIM_OC2_SetConfig+0xd0>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d10d      	bne.n	80023cc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	011b      	lsls	r3, r3, #4
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a14      	ldr	r2, [pc, #80]	; (8002420 <TIM_OC2_SetConfig+0xd0>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d113      	bne.n	80023fc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80023e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	695b      	ldr	r3, [r3, #20]
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685a      	ldr	r2, [r3, #4]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	621a      	str	r2, [r3, #32]
}
 8002416:	bf00      	nop
 8002418:	371c      	adds	r7, #28
 800241a:	46bd      	mov	sp, r7
 800241c:	bc80      	pop	{r7}
 800241e:	4770      	bx	lr
 8002420:	40012c00 	.word	0x40012c00

08002424 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002424:	b480      	push	{r7}
 8002426:	b087      	sub	sp, #28
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f023 0303 	bic.w	r3, r3, #3
 800245a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	4313      	orrs	r3, r2
 8002464:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800246c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	021b      	lsls	r3, r3, #8
 8002474:	697a      	ldr	r2, [r7, #20]
 8002476:	4313      	orrs	r3, r2
 8002478:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a1d      	ldr	r2, [pc, #116]	; (80024f4 <TIM_OC3_SetConfig+0xd0>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d10d      	bne.n	800249e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002488:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	021b      	lsls	r3, r3, #8
 8002490:	697a      	ldr	r2, [r7, #20]
 8002492:	4313      	orrs	r3, r2
 8002494:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800249c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a14      	ldr	r2, [pc, #80]	; (80024f4 <TIM_OC3_SetConfig+0xd0>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d113      	bne.n	80024ce <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80024ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80024b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	011b      	lsls	r3, r3, #4
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	4313      	orrs	r3, r2
 80024c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	011b      	lsls	r3, r3, #4
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685a      	ldr	r2, [r3, #4]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	697a      	ldr	r2, [r7, #20]
 80024e6:	621a      	str	r2, [r3, #32]
}
 80024e8:	bf00      	nop
 80024ea:	371c      	adds	r7, #28
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bc80      	pop	{r7}
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	40012c00 	.word	0x40012c00

080024f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b087      	sub	sp, #28
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	69db      	ldr	r3, [r3, #28]
 800251e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800252e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	021b      	lsls	r3, r3, #8
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	4313      	orrs	r3, r2
 800253a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002542:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	031b      	lsls	r3, r3, #12
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	4313      	orrs	r3, r2
 800254e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a0f      	ldr	r2, [pc, #60]	; (8002590 <TIM_OC4_SetConfig+0x98>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d109      	bne.n	800256c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800255e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	695b      	ldr	r3, [r3, #20]
 8002564:	019b      	lsls	r3, r3, #6
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	4313      	orrs	r3, r2
 800256a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	621a      	str	r2, [r3, #32]
}
 8002586:	bf00      	nop
 8002588:	371c      	adds	r7, #28
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr
 8002590:	40012c00 	.word	0x40012c00

08002594 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002594:	b480      	push	{r7}
 8002596:	b087      	sub	sp, #28
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	f023 0201 	bic.w	r2, r3, #1
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	011b      	lsls	r3, r3, #4
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	f023 030a 	bic.w	r3, r3, #10
 80025d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	621a      	str	r2, [r3, #32]
}
 80025e6:	bf00      	nop
 80025e8:	371c      	adds	r7, #28
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr

080025f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b087      	sub	sp, #28
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	f023 0210 	bic.w	r2, r3, #16
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800261a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	031b      	lsls	r3, r3, #12
 8002620:	697a      	ldr	r2, [r7, #20]
 8002622:	4313      	orrs	r3, r2
 8002624:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800262c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	011b      	lsls	r3, r3, #4
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	4313      	orrs	r3, r2
 8002636:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	621a      	str	r2, [r3, #32]
}
 8002644:	bf00      	nop
 8002646:	371c      	adds	r7, #28
 8002648:	46bd      	mov	sp, r7
 800264a:	bc80      	pop	{r7}
 800264c:	4770      	bx	lr

0800264e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800264e:	b480      	push	{r7}
 8002650:	b085      	sub	sp, #20
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
 8002656:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002664:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	4313      	orrs	r3, r2
 800266c:	f043 0307 	orr.w	r3, r3, #7
 8002670:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	609a      	str	r2, [r3, #8]
}
 8002678:	bf00      	nop
 800267a:	3714      	adds	r7, #20
 800267c:	46bd      	mov	sp, r7
 800267e:	bc80      	pop	{r7}
 8002680:	4770      	bx	lr

08002682 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002682:	b480      	push	{r7}
 8002684:	b087      	sub	sp, #28
 8002686:	af00      	add	r7, sp, #0
 8002688:	60f8      	str	r0, [r7, #12]
 800268a:	60b9      	str	r1, [r7, #8]
 800268c:	607a      	str	r2, [r7, #4]
 800268e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800269c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	021a      	lsls	r2, r3, #8
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	431a      	orrs	r2, r3
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	609a      	str	r2, [r3, #8]
}
 80026b6:	bf00      	nop
 80026b8:	371c      	adds	r7, #28
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc80      	pop	{r7}
 80026be:	4770      	bx	lr

080026c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b087      	sub	sp, #28
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	f003 031f 	and.w	r3, r3, #31
 80026d2:	2201      	movs	r2, #1
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6a1a      	ldr	r2, [r3, #32]
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	43db      	mvns	r3, r3
 80026e2:	401a      	ands	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6a1a      	ldr	r2, [r3, #32]
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	f003 031f 	and.w	r3, r3, #31
 80026f2:	6879      	ldr	r1, [r7, #4]
 80026f4:	fa01 f303 	lsl.w	r3, r1, r3
 80026f8:	431a      	orrs	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	621a      	str	r2, [r3, #32]
}
 80026fe:	bf00      	nop
 8002700:	371c      	adds	r7, #28
 8002702:	46bd      	mov	sp, r7
 8002704:	bc80      	pop	{r7}
 8002706:	4770      	bx	lr

08002708 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002718:	2b01      	cmp	r3, #1
 800271a:	d101      	bne.n	8002720 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800271c:	2302      	movs	r3, #2
 800271e:	e046      	b.n	80027ae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2202      	movs	r2, #2
 800272c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002746:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	4313      	orrs	r3, r2
 8002750:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a16      	ldr	r2, [pc, #88]	; (80027b8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d00e      	beq.n	8002782 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800276c:	d009      	beq.n	8002782 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a12      	ldr	r2, [pc, #72]	; (80027bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d004      	beq.n	8002782 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a10      	ldr	r2, [pc, #64]	; (80027c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d10c      	bne.n	800279c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002788:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	68ba      	ldr	r2, [r7, #8]
 8002790:	4313      	orrs	r3, r2
 8002792:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68ba      	ldr	r2, [r7, #8]
 800279a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3714      	adds	r7, #20
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr
 80027b8:	40012c00 	.word	0x40012c00
 80027bc:	40000400 	.word	0x40000400
 80027c0:	40000800 	.word	0x40000800

080027c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e03f      	b.n	8002856 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d106      	bne.n	80027f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7fe f92a 	bl	8000a44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2224      	movs	r2, #36	; 0x24
 80027f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68da      	ldr	r2, [r3, #12]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002806:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 f905 	bl	8002a18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	691a      	ldr	r2, [r3, #16]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800281c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	695a      	ldr	r2, [r3, #20]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800282c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68da      	ldr	r2, [r3, #12]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800283c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2220      	movs	r2, #32
 8002848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2220      	movs	r2, #32
 8002850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	b08a      	sub	sp, #40	; 0x28
 8002862:	af02      	add	r7, sp, #8
 8002864:	60f8      	str	r0, [r7, #12]
 8002866:	60b9      	str	r1, [r7, #8]
 8002868:	603b      	str	r3, [r7, #0]
 800286a:	4613      	mov	r3, r2
 800286c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800286e:	2300      	movs	r3, #0
 8002870:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b20      	cmp	r3, #32
 800287c:	d17c      	bne.n	8002978 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d002      	beq.n	800288a <HAL_UART_Transmit+0x2c>
 8002884:	88fb      	ldrh	r3, [r7, #6]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e075      	b.n	800297a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002894:	2b01      	cmp	r3, #1
 8002896:	d101      	bne.n	800289c <HAL_UART_Transmit+0x3e>
 8002898:	2302      	movs	r3, #2
 800289a:	e06e      	b.n	800297a <HAL_UART_Transmit+0x11c>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2221      	movs	r2, #33	; 0x21
 80028ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028b2:	f7fe f991 	bl	8000bd8 <HAL_GetTick>
 80028b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	88fa      	ldrh	r2, [r7, #6]
 80028bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	88fa      	ldrh	r2, [r7, #6]
 80028c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028cc:	d108      	bne.n	80028e0 <HAL_UART_Transmit+0x82>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d104      	bne.n	80028e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80028d6:	2300      	movs	r3, #0
 80028d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	61bb      	str	r3, [r7, #24]
 80028de:	e003      	b.n	80028e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028e4:	2300      	movs	r3, #0
 80028e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80028f0:	e02a      	b.n	8002948 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	9300      	str	r3, [sp, #0]
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	2200      	movs	r2, #0
 80028fa:	2180      	movs	r1, #128	; 0x80
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f000 f840 	bl	8002982 <UART_WaitOnFlagUntilTimeout>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e036      	b.n	800297a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10b      	bne.n	800292a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	881b      	ldrh	r3, [r3, #0]
 8002916:	461a      	mov	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002920:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	3302      	adds	r3, #2
 8002926:	61bb      	str	r3, [r7, #24]
 8002928:	e007      	b.n	800293a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	781a      	ldrb	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	3301      	adds	r3, #1
 8002938:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800293e:	b29b      	uxth	r3, r3
 8002940:	3b01      	subs	r3, #1
 8002942:	b29a      	uxth	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800294c:	b29b      	uxth	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1cf      	bne.n	80028f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	9300      	str	r3, [sp, #0]
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	2200      	movs	r2, #0
 800295a:	2140      	movs	r1, #64	; 0x40
 800295c:	68f8      	ldr	r0, [r7, #12]
 800295e:	f000 f810 	bl	8002982 <UART_WaitOnFlagUntilTimeout>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e006      	b.n	800297a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2220      	movs	r2, #32
 8002970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002974:	2300      	movs	r3, #0
 8002976:	e000      	b.n	800297a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002978:	2302      	movs	r3, #2
  }
}
 800297a:	4618      	mov	r0, r3
 800297c:	3720      	adds	r7, #32
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b084      	sub	sp, #16
 8002986:	af00      	add	r7, sp, #0
 8002988:	60f8      	str	r0, [r7, #12]
 800298a:	60b9      	str	r1, [r7, #8]
 800298c:	603b      	str	r3, [r7, #0]
 800298e:	4613      	mov	r3, r2
 8002990:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002992:	e02c      	b.n	80029ee <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800299a:	d028      	beq.n	80029ee <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d007      	beq.n	80029b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80029a2:	f7fe f919 	bl	8000bd8 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d21d      	bcs.n	80029ee <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68da      	ldr	r2, [r3, #12]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80029c0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	695a      	ldr	r2, [r3, #20]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 0201 	bic.w	r2, r2, #1
 80029d0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2220      	movs	r2, #32
 80029d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2220      	movs	r2, #32
 80029de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e00f      	b.n	8002a0e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	4013      	ands	r3, r2
 80029f8:	68ba      	ldr	r2, [r7, #8]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	bf0c      	ite	eq
 80029fe:	2301      	moveq	r3, #1
 8002a00:	2300      	movne	r3, #0
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	461a      	mov	r2, r3
 8002a06:	79fb      	ldrb	r3, [r7, #7]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d0c3      	beq.n	8002994 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
	...

08002a18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68da      	ldr	r2, [r3, #12]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	689a      	ldr	r2, [r3, #8]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	695b      	ldr	r3, [r3, #20]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002a52:	f023 030c 	bic.w	r3, r3, #12
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	6812      	ldr	r2, [r2, #0]
 8002a5a:	68b9      	ldr	r1, [r7, #8]
 8002a5c:	430b      	orrs	r3, r1
 8002a5e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	699a      	ldr	r2, [r3, #24]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a2c      	ldr	r2, [pc, #176]	; (8002b2c <UART_SetConfig+0x114>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d103      	bne.n	8002a88 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a80:	f7fe ff8c 	bl	800199c <HAL_RCC_GetPCLK2Freq>
 8002a84:	60f8      	str	r0, [r7, #12]
 8002a86:	e002      	b.n	8002a8e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a88:	f7fe ff74 	bl	8001974 <HAL_RCC_GetPCLK1Freq>
 8002a8c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	4613      	mov	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	009a      	lsls	r2, r3, #2
 8002a98:	441a      	add	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa4:	4a22      	ldr	r2, [pc, #136]	; (8002b30 <UART_SetConfig+0x118>)
 8002aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aaa:	095b      	lsrs	r3, r3, #5
 8002aac:	0119      	lsls	r1, r3, #4
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	4413      	add	r3, r2
 8002ab6:	009a      	lsls	r2, r3, #2
 8002ab8:	441a      	add	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ac4:	4b1a      	ldr	r3, [pc, #104]	; (8002b30 <UART_SetConfig+0x118>)
 8002ac6:	fba3 0302 	umull	r0, r3, r3, r2
 8002aca:	095b      	lsrs	r3, r3, #5
 8002acc:	2064      	movs	r0, #100	; 0x64
 8002ace:	fb00 f303 	mul.w	r3, r0, r3
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	011b      	lsls	r3, r3, #4
 8002ad6:	3332      	adds	r3, #50	; 0x32
 8002ad8:	4a15      	ldr	r2, [pc, #84]	; (8002b30 <UART_SetConfig+0x118>)
 8002ada:	fba2 2303 	umull	r2, r3, r2, r3
 8002ade:	095b      	lsrs	r3, r3, #5
 8002ae0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ae4:	4419      	add	r1, r3
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	009a      	lsls	r2, r3, #2
 8002af0:	441a      	add	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002afc:	4b0c      	ldr	r3, [pc, #48]	; (8002b30 <UART_SetConfig+0x118>)
 8002afe:	fba3 0302 	umull	r0, r3, r3, r2
 8002b02:	095b      	lsrs	r3, r3, #5
 8002b04:	2064      	movs	r0, #100	; 0x64
 8002b06:	fb00 f303 	mul.w	r3, r0, r3
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	011b      	lsls	r3, r3, #4
 8002b0e:	3332      	adds	r3, #50	; 0x32
 8002b10:	4a07      	ldr	r2, [pc, #28]	; (8002b30 <UART_SetConfig+0x118>)
 8002b12:	fba2 2303 	umull	r2, r3, r2, r3
 8002b16:	095b      	lsrs	r3, r3, #5
 8002b18:	f003 020f 	and.w	r2, r3, #15
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	440a      	add	r2, r1
 8002b22:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002b24:	bf00      	nop
 8002b26:	3710      	adds	r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40013800 	.word	0x40013800
 8002b30:	51eb851f 	.word	0x51eb851f

08002b34 <__errno>:
 8002b34:	4b01      	ldr	r3, [pc, #4]	; (8002b3c <__errno+0x8>)
 8002b36:	6818      	ldr	r0, [r3, #0]
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	20000214 	.word	0x20000214

08002b40 <__libc_init_array>:
 8002b40:	b570      	push	{r4, r5, r6, lr}
 8002b42:	2600      	movs	r6, #0
 8002b44:	4d0c      	ldr	r5, [pc, #48]	; (8002b78 <__libc_init_array+0x38>)
 8002b46:	4c0d      	ldr	r4, [pc, #52]	; (8002b7c <__libc_init_array+0x3c>)
 8002b48:	1b64      	subs	r4, r4, r5
 8002b4a:	10a4      	asrs	r4, r4, #2
 8002b4c:	42a6      	cmp	r6, r4
 8002b4e:	d109      	bne.n	8002b64 <__libc_init_array+0x24>
 8002b50:	f000 fc9c 	bl	800348c <_init>
 8002b54:	2600      	movs	r6, #0
 8002b56:	4d0a      	ldr	r5, [pc, #40]	; (8002b80 <__libc_init_array+0x40>)
 8002b58:	4c0a      	ldr	r4, [pc, #40]	; (8002b84 <__libc_init_array+0x44>)
 8002b5a:	1b64      	subs	r4, r4, r5
 8002b5c:	10a4      	asrs	r4, r4, #2
 8002b5e:	42a6      	cmp	r6, r4
 8002b60:	d105      	bne.n	8002b6e <__libc_init_array+0x2e>
 8002b62:	bd70      	pop	{r4, r5, r6, pc}
 8002b64:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b68:	4798      	blx	r3
 8002b6a:	3601      	adds	r6, #1
 8002b6c:	e7ee      	b.n	8002b4c <__libc_init_array+0xc>
 8002b6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b72:	4798      	blx	r3
 8002b74:	3601      	adds	r6, #1
 8002b76:	e7f2      	b.n	8002b5e <__libc_init_array+0x1e>
 8002b78:	08003550 	.word	0x08003550
 8002b7c:	08003550 	.word	0x08003550
 8002b80:	08003550 	.word	0x08003550
 8002b84:	08003554 	.word	0x08003554

08002b88 <memset>:
 8002b88:	4603      	mov	r3, r0
 8002b8a:	4402      	add	r2, r0
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d100      	bne.n	8002b92 <memset+0xa>
 8002b90:	4770      	bx	lr
 8002b92:	f803 1b01 	strb.w	r1, [r3], #1
 8002b96:	e7f9      	b.n	8002b8c <memset+0x4>

08002b98 <siprintf>:
 8002b98:	b40e      	push	{r1, r2, r3}
 8002b9a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002b9e:	b500      	push	{lr}
 8002ba0:	b09c      	sub	sp, #112	; 0x70
 8002ba2:	ab1d      	add	r3, sp, #116	; 0x74
 8002ba4:	9002      	str	r0, [sp, #8]
 8002ba6:	9006      	str	r0, [sp, #24]
 8002ba8:	9107      	str	r1, [sp, #28]
 8002baa:	9104      	str	r1, [sp, #16]
 8002bac:	4808      	ldr	r0, [pc, #32]	; (8002bd0 <siprintf+0x38>)
 8002bae:	4909      	ldr	r1, [pc, #36]	; (8002bd4 <siprintf+0x3c>)
 8002bb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8002bb4:	9105      	str	r1, [sp, #20]
 8002bb6:	6800      	ldr	r0, [r0, #0]
 8002bb8:	a902      	add	r1, sp, #8
 8002bba:	9301      	str	r3, [sp, #4]
 8002bbc:	f000 f868 	bl	8002c90 <_svfiprintf_r>
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	9b02      	ldr	r3, [sp, #8]
 8002bc4:	701a      	strb	r2, [r3, #0]
 8002bc6:	b01c      	add	sp, #112	; 0x70
 8002bc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8002bcc:	b003      	add	sp, #12
 8002bce:	4770      	bx	lr
 8002bd0:	20000214 	.word	0x20000214
 8002bd4:	ffff0208 	.word	0xffff0208

08002bd8 <__ssputs_r>:
 8002bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bdc:	688e      	ldr	r6, [r1, #8]
 8002bde:	4682      	mov	sl, r0
 8002be0:	429e      	cmp	r6, r3
 8002be2:	460c      	mov	r4, r1
 8002be4:	4690      	mov	r8, r2
 8002be6:	461f      	mov	r7, r3
 8002be8:	d838      	bhi.n	8002c5c <__ssputs_r+0x84>
 8002bea:	898a      	ldrh	r2, [r1, #12]
 8002bec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002bf0:	d032      	beq.n	8002c58 <__ssputs_r+0x80>
 8002bf2:	6825      	ldr	r5, [r4, #0]
 8002bf4:	6909      	ldr	r1, [r1, #16]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	eba5 0901 	sub.w	r9, r5, r1
 8002bfc:	6965      	ldr	r5, [r4, #20]
 8002bfe:	444b      	add	r3, r9
 8002c00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002c04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002c08:	106d      	asrs	r5, r5, #1
 8002c0a:	429d      	cmp	r5, r3
 8002c0c:	bf38      	it	cc
 8002c0e:	461d      	movcc	r5, r3
 8002c10:	0553      	lsls	r3, r2, #21
 8002c12:	d531      	bpl.n	8002c78 <__ssputs_r+0xa0>
 8002c14:	4629      	mov	r1, r5
 8002c16:	f000 fb6f 	bl	80032f8 <_malloc_r>
 8002c1a:	4606      	mov	r6, r0
 8002c1c:	b950      	cbnz	r0, 8002c34 <__ssputs_r+0x5c>
 8002c1e:	230c      	movs	r3, #12
 8002c20:	f04f 30ff 	mov.w	r0, #4294967295
 8002c24:	f8ca 3000 	str.w	r3, [sl]
 8002c28:	89a3      	ldrh	r3, [r4, #12]
 8002c2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c2e:	81a3      	strh	r3, [r4, #12]
 8002c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c34:	464a      	mov	r2, r9
 8002c36:	6921      	ldr	r1, [r4, #16]
 8002c38:	f000 face 	bl	80031d8 <memcpy>
 8002c3c:	89a3      	ldrh	r3, [r4, #12]
 8002c3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c46:	81a3      	strh	r3, [r4, #12]
 8002c48:	6126      	str	r6, [r4, #16]
 8002c4a:	444e      	add	r6, r9
 8002c4c:	6026      	str	r6, [r4, #0]
 8002c4e:	463e      	mov	r6, r7
 8002c50:	6165      	str	r5, [r4, #20]
 8002c52:	eba5 0509 	sub.w	r5, r5, r9
 8002c56:	60a5      	str	r5, [r4, #8]
 8002c58:	42be      	cmp	r6, r7
 8002c5a:	d900      	bls.n	8002c5e <__ssputs_r+0x86>
 8002c5c:	463e      	mov	r6, r7
 8002c5e:	4632      	mov	r2, r6
 8002c60:	4641      	mov	r1, r8
 8002c62:	6820      	ldr	r0, [r4, #0]
 8002c64:	f000 fac6 	bl	80031f4 <memmove>
 8002c68:	68a3      	ldr	r3, [r4, #8]
 8002c6a:	2000      	movs	r0, #0
 8002c6c:	1b9b      	subs	r3, r3, r6
 8002c6e:	60a3      	str	r3, [r4, #8]
 8002c70:	6823      	ldr	r3, [r4, #0]
 8002c72:	4433      	add	r3, r6
 8002c74:	6023      	str	r3, [r4, #0]
 8002c76:	e7db      	b.n	8002c30 <__ssputs_r+0x58>
 8002c78:	462a      	mov	r2, r5
 8002c7a:	f000 fbb1 	bl	80033e0 <_realloc_r>
 8002c7e:	4606      	mov	r6, r0
 8002c80:	2800      	cmp	r0, #0
 8002c82:	d1e1      	bne.n	8002c48 <__ssputs_r+0x70>
 8002c84:	4650      	mov	r0, sl
 8002c86:	6921      	ldr	r1, [r4, #16]
 8002c88:	f000 face 	bl	8003228 <_free_r>
 8002c8c:	e7c7      	b.n	8002c1e <__ssputs_r+0x46>
	...

08002c90 <_svfiprintf_r>:
 8002c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c94:	4698      	mov	r8, r3
 8002c96:	898b      	ldrh	r3, [r1, #12]
 8002c98:	4607      	mov	r7, r0
 8002c9a:	061b      	lsls	r3, r3, #24
 8002c9c:	460d      	mov	r5, r1
 8002c9e:	4614      	mov	r4, r2
 8002ca0:	b09d      	sub	sp, #116	; 0x74
 8002ca2:	d50e      	bpl.n	8002cc2 <_svfiprintf_r+0x32>
 8002ca4:	690b      	ldr	r3, [r1, #16]
 8002ca6:	b963      	cbnz	r3, 8002cc2 <_svfiprintf_r+0x32>
 8002ca8:	2140      	movs	r1, #64	; 0x40
 8002caa:	f000 fb25 	bl	80032f8 <_malloc_r>
 8002cae:	6028      	str	r0, [r5, #0]
 8002cb0:	6128      	str	r0, [r5, #16]
 8002cb2:	b920      	cbnz	r0, 8002cbe <_svfiprintf_r+0x2e>
 8002cb4:	230c      	movs	r3, #12
 8002cb6:	603b      	str	r3, [r7, #0]
 8002cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cbc:	e0d1      	b.n	8002e62 <_svfiprintf_r+0x1d2>
 8002cbe:	2340      	movs	r3, #64	; 0x40
 8002cc0:	616b      	str	r3, [r5, #20]
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	9309      	str	r3, [sp, #36]	; 0x24
 8002cc6:	2320      	movs	r3, #32
 8002cc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002ccc:	2330      	movs	r3, #48	; 0x30
 8002cce:	f04f 0901 	mov.w	r9, #1
 8002cd2:	f8cd 800c 	str.w	r8, [sp, #12]
 8002cd6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002e7c <_svfiprintf_r+0x1ec>
 8002cda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002cde:	4623      	mov	r3, r4
 8002ce0:	469a      	mov	sl, r3
 8002ce2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ce6:	b10a      	cbz	r2, 8002cec <_svfiprintf_r+0x5c>
 8002ce8:	2a25      	cmp	r2, #37	; 0x25
 8002cea:	d1f9      	bne.n	8002ce0 <_svfiprintf_r+0x50>
 8002cec:	ebba 0b04 	subs.w	fp, sl, r4
 8002cf0:	d00b      	beq.n	8002d0a <_svfiprintf_r+0x7a>
 8002cf2:	465b      	mov	r3, fp
 8002cf4:	4622      	mov	r2, r4
 8002cf6:	4629      	mov	r1, r5
 8002cf8:	4638      	mov	r0, r7
 8002cfa:	f7ff ff6d 	bl	8002bd8 <__ssputs_r>
 8002cfe:	3001      	adds	r0, #1
 8002d00:	f000 80aa 	beq.w	8002e58 <_svfiprintf_r+0x1c8>
 8002d04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d06:	445a      	add	r2, fp
 8002d08:	9209      	str	r2, [sp, #36]	; 0x24
 8002d0a:	f89a 3000 	ldrb.w	r3, [sl]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f000 80a2 	beq.w	8002e58 <_svfiprintf_r+0x1c8>
 8002d14:	2300      	movs	r3, #0
 8002d16:	f04f 32ff 	mov.w	r2, #4294967295
 8002d1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d1e:	f10a 0a01 	add.w	sl, sl, #1
 8002d22:	9304      	str	r3, [sp, #16]
 8002d24:	9307      	str	r3, [sp, #28]
 8002d26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002d2a:	931a      	str	r3, [sp, #104]	; 0x68
 8002d2c:	4654      	mov	r4, sl
 8002d2e:	2205      	movs	r2, #5
 8002d30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d34:	4851      	ldr	r0, [pc, #324]	; (8002e7c <_svfiprintf_r+0x1ec>)
 8002d36:	f000 fa41 	bl	80031bc <memchr>
 8002d3a:	9a04      	ldr	r2, [sp, #16]
 8002d3c:	b9d8      	cbnz	r0, 8002d76 <_svfiprintf_r+0xe6>
 8002d3e:	06d0      	lsls	r0, r2, #27
 8002d40:	bf44      	itt	mi
 8002d42:	2320      	movmi	r3, #32
 8002d44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d48:	0711      	lsls	r1, r2, #28
 8002d4a:	bf44      	itt	mi
 8002d4c:	232b      	movmi	r3, #43	; 0x2b
 8002d4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d52:	f89a 3000 	ldrb.w	r3, [sl]
 8002d56:	2b2a      	cmp	r3, #42	; 0x2a
 8002d58:	d015      	beq.n	8002d86 <_svfiprintf_r+0xf6>
 8002d5a:	4654      	mov	r4, sl
 8002d5c:	2000      	movs	r0, #0
 8002d5e:	f04f 0c0a 	mov.w	ip, #10
 8002d62:	9a07      	ldr	r2, [sp, #28]
 8002d64:	4621      	mov	r1, r4
 8002d66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d6a:	3b30      	subs	r3, #48	; 0x30
 8002d6c:	2b09      	cmp	r3, #9
 8002d6e:	d94e      	bls.n	8002e0e <_svfiprintf_r+0x17e>
 8002d70:	b1b0      	cbz	r0, 8002da0 <_svfiprintf_r+0x110>
 8002d72:	9207      	str	r2, [sp, #28]
 8002d74:	e014      	b.n	8002da0 <_svfiprintf_r+0x110>
 8002d76:	eba0 0308 	sub.w	r3, r0, r8
 8002d7a:	fa09 f303 	lsl.w	r3, r9, r3
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	46a2      	mov	sl, r4
 8002d82:	9304      	str	r3, [sp, #16]
 8002d84:	e7d2      	b.n	8002d2c <_svfiprintf_r+0x9c>
 8002d86:	9b03      	ldr	r3, [sp, #12]
 8002d88:	1d19      	adds	r1, r3, #4
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	9103      	str	r1, [sp, #12]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	bfbb      	ittet	lt
 8002d92:	425b      	neglt	r3, r3
 8002d94:	f042 0202 	orrlt.w	r2, r2, #2
 8002d98:	9307      	strge	r3, [sp, #28]
 8002d9a:	9307      	strlt	r3, [sp, #28]
 8002d9c:	bfb8      	it	lt
 8002d9e:	9204      	strlt	r2, [sp, #16]
 8002da0:	7823      	ldrb	r3, [r4, #0]
 8002da2:	2b2e      	cmp	r3, #46	; 0x2e
 8002da4:	d10c      	bne.n	8002dc0 <_svfiprintf_r+0x130>
 8002da6:	7863      	ldrb	r3, [r4, #1]
 8002da8:	2b2a      	cmp	r3, #42	; 0x2a
 8002daa:	d135      	bne.n	8002e18 <_svfiprintf_r+0x188>
 8002dac:	9b03      	ldr	r3, [sp, #12]
 8002dae:	3402      	adds	r4, #2
 8002db0:	1d1a      	adds	r2, r3, #4
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	9203      	str	r2, [sp, #12]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	bfb8      	it	lt
 8002dba:	f04f 33ff 	movlt.w	r3, #4294967295
 8002dbe:	9305      	str	r3, [sp, #20]
 8002dc0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002e80 <_svfiprintf_r+0x1f0>
 8002dc4:	2203      	movs	r2, #3
 8002dc6:	4650      	mov	r0, sl
 8002dc8:	7821      	ldrb	r1, [r4, #0]
 8002dca:	f000 f9f7 	bl	80031bc <memchr>
 8002dce:	b140      	cbz	r0, 8002de2 <_svfiprintf_r+0x152>
 8002dd0:	2340      	movs	r3, #64	; 0x40
 8002dd2:	eba0 000a 	sub.w	r0, r0, sl
 8002dd6:	fa03 f000 	lsl.w	r0, r3, r0
 8002dda:	9b04      	ldr	r3, [sp, #16]
 8002ddc:	3401      	adds	r4, #1
 8002dde:	4303      	orrs	r3, r0
 8002de0:	9304      	str	r3, [sp, #16]
 8002de2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002de6:	2206      	movs	r2, #6
 8002de8:	4826      	ldr	r0, [pc, #152]	; (8002e84 <_svfiprintf_r+0x1f4>)
 8002dea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002dee:	f000 f9e5 	bl	80031bc <memchr>
 8002df2:	2800      	cmp	r0, #0
 8002df4:	d038      	beq.n	8002e68 <_svfiprintf_r+0x1d8>
 8002df6:	4b24      	ldr	r3, [pc, #144]	; (8002e88 <_svfiprintf_r+0x1f8>)
 8002df8:	bb1b      	cbnz	r3, 8002e42 <_svfiprintf_r+0x1b2>
 8002dfa:	9b03      	ldr	r3, [sp, #12]
 8002dfc:	3307      	adds	r3, #7
 8002dfe:	f023 0307 	bic.w	r3, r3, #7
 8002e02:	3308      	adds	r3, #8
 8002e04:	9303      	str	r3, [sp, #12]
 8002e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e08:	4433      	add	r3, r6
 8002e0a:	9309      	str	r3, [sp, #36]	; 0x24
 8002e0c:	e767      	b.n	8002cde <_svfiprintf_r+0x4e>
 8002e0e:	460c      	mov	r4, r1
 8002e10:	2001      	movs	r0, #1
 8002e12:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e16:	e7a5      	b.n	8002d64 <_svfiprintf_r+0xd4>
 8002e18:	2300      	movs	r3, #0
 8002e1a:	f04f 0c0a 	mov.w	ip, #10
 8002e1e:	4619      	mov	r1, r3
 8002e20:	3401      	adds	r4, #1
 8002e22:	9305      	str	r3, [sp, #20]
 8002e24:	4620      	mov	r0, r4
 8002e26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e2a:	3a30      	subs	r2, #48	; 0x30
 8002e2c:	2a09      	cmp	r2, #9
 8002e2e:	d903      	bls.n	8002e38 <_svfiprintf_r+0x1a8>
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d0c5      	beq.n	8002dc0 <_svfiprintf_r+0x130>
 8002e34:	9105      	str	r1, [sp, #20]
 8002e36:	e7c3      	b.n	8002dc0 <_svfiprintf_r+0x130>
 8002e38:	4604      	mov	r4, r0
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e40:	e7f0      	b.n	8002e24 <_svfiprintf_r+0x194>
 8002e42:	ab03      	add	r3, sp, #12
 8002e44:	9300      	str	r3, [sp, #0]
 8002e46:	462a      	mov	r2, r5
 8002e48:	4638      	mov	r0, r7
 8002e4a:	4b10      	ldr	r3, [pc, #64]	; (8002e8c <_svfiprintf_r+0x1fc>)
 8002e4c:	a904      	add	r1, sp, #16
 8002e4e:	f3af 8000 	nop.w
 8002e52:	1c42      	adds	r2, r0, #1
 8002e54:	4606      	mov	r6, r0
 8002e56:	d1d6      	bne.n	8002e06 <_svfiprintf_r+0x176>
 8002e58:	89ab      	ldrh	r3, [r5, #12]
 8002e5a:	065b      	lsls	r3, r3, #25
 8002e5c:	f53f af2c 	bmi.w	8002cb8 <_svfiprintf_r+0x28>
 8002e60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002e62:	b01d      	add	sp, #116	; 0x74
 8002e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e68:	ab03      	add	r3, sp, #12
 8002e6a:	9300      	str	r3, [sp, #0]
 8002e6c:	462a      	mov	r2, r5
 8002e6e:	4638      	mov	r0, r7
 8002e70:	4b06      	ldr	r3, [pc, #24]	; (8002e8c <_svfiprintf_r+0x1fc>)
 8002e72:	a904      	add	r1, sp, #16
 8002e74:	f000 f87c 	bl	8002f70 <_printf_i>
 8002e78:	e7eb      	b.n	8002e52 <_svfiprintf_r+0x1c2>
 8002e7a:	bf00      	nop
 8002e7c:	0800351c 	.word	0x0800351c
 8002e80:	08003522 	.word	0x08003522
 8002e84:	08003526 	.word	0x08003526
 8002e88:	00000000 	.word	0x00000000
 8002e8c:	08002bd9 	.word	0x08002bd9

08002e90 <_printf_common>:
 8002e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e94:	4616      	mov	r6, r2
 8002e96:	4699      	mov	r9, r3
 8002e98:	688a      	ldr	r2, [r1, #8]
 8002e9a:	690b      	ldr	r3, [r1, #16]
 8002e9c:	4607      	mov	r7, r0
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	bfb8      	it	lt
 8002ea2:	4613      	movlt	r3, r2
 8002ea4:	6033      	str	r3, [r6, #0]
 8002ea6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002eaa:	460c      	mov	r4, r1
 8002eac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002eb0:	b10a      	cbz	r2, 8002eb6 <_printf_common+0x26>
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	6033      	str	r3, [r6, #0]
 8002eb6:	6823      	ldr	r3, [r4, #0]
 8002eb8:	0699      	lsls	r1, r3, #26
 8002eba:	bf42      	ittt	mi
 8002ebc:	6833      	ldrmi	r3, [r6, #0]
 8002ebe:	3302      	addmi	r3, #2
 8002ec0:	6033      	strmi	r3, [r6, #0]
 8002ec2:	6825      	ldr	r5, [r4, #0]
 8002ec4:	f015 0506 	ands.w	r5, r5, #6
 8002ec8:	d106      	bne.n	8002ed8 <_printf_common+0x48>
 8002eca:	f104 0a19 	add.w	sl, r4, #25
 8002ece:	68e3      	ldr	r3, [r4, #12]
 8002ed0:	6832      	ldr	r2, [r6, #0]
 8002ed2:	1a9b      	subs	r3, r3, r2
 8002ed4:	42ab      	cmp	r3, r5
 8002ed6:	dc28      	bgt.n	8002f2a <_printf_common+0x9a>
 8002ed8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002edc:	1e13      	subs	r3, r2, #0
 8002ede:	6822      	ldr	r2, [r4, #0]
 8002ee0:	bf18      	it	ne
 8002ee2:	2301      	movne	r3, #1
 8002ee4:	0692      	lsls	r2, r2, #26
 8002ee6:	d42d      	bmi.n	8002f44 <_printf_common+0xb4>
 8002ee8:	4649      	mov	r1, r9
 8002eea:	4638      	mov	r0, r7
 8002eec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ef0:	47c0      	blx	r8
 8002ef2:	3001      	adds	r0, #1
 8002ef4:	d020      	beq.n	8002f38 <_printf_common+0xa8>
 8002ef6:	6823      	ldr	r3, [r4, #0]
 8002ef8:	68e5      	ldr	r5, [r4, #12]
 8002efa:	f003 0306 	and.w	r3, r3, #6
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	bf18      	it	ne
 8002f02:	2500      	movne	r5, #0
 8002f04:	6832      	ldr	r2, [r6, #0]
 8002f06:	f04f 0600 	mov.w	r6, #0
 8002f0a:	68a3      	ldr	r3, [r4, #8]
 8002f0c:	bf08      	it	eq
 8002f0e:	1aad      	subeq	r5, r5, r2
 8002f10:	6922      	ldr	r2, [r4, #16]
 8002f12:	bf08      	it	eq
 8002f14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	bfc4      	itt	gt
 8002f1c:	1a9b      	subgt	r3, r3, r2
 8002f1e:	18ed      	addgt	r5, r5, r3
 8002f20:	341a      	adds	r4, #26
 8002f22:	42b5      	cmp	r5, r6
 8002f24:	d11a      	bne.n	8002f5c <_printf_common+0xcc>
 8002f26:	2000      	movs	r0, #0
 8002f28:	e008      	b.n	8002f3c <_printf_common+0xac>
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	4652      	mov	r2, sl
 8002f2e:	4649      	mov	r1, r9
 8002f30:	4638      	mov	r0, r7
 8002f32:	47c0      	blx	r8
 8002f34:	3001      	adds	r0, #1
 8002f36:	d103      	bne.n	8002f40 <_printf_common+0xb0>
 8002f38:	f04f 30ff 	mov.w	r0, #4294967295
 8002f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f40:	3501      	adds	r5, #1
 8002f42:	e7c4      	b.n	8002ece <_printf_common+0x3e>
 8002f44:	2030      	movs	r0, #48	; 0x30
 8002f46:	18e1      	adds	r1, r4, r3
 8002f48:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f4c:	1c5a      	adds	r2, r3, #1
 8002f4e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f52:	4422      	add	r2, r4
 8002f54:	3302      	adds	r3, #2
 8002f56:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f5a:	e7c5      	b.n	8002ee8 <_printf_common+0x58>
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	4622      	mov	r2, r4
 8002f60:	4649      	mov	r1, r9
 8002f62:	4638      	mov	r0, r7
 8002f64:	47c0      	blx	r8
 8002f66:	3001      	adds	r0, #1
 8002f68:	d0e6      	beq.n	8002f38 <_printf_common+0xa8>
 8002f6a:	3601      	adds	r6, #1
 8002f6c:	e7d9      	b.n	8002f22 <_printf_common+0x92>
	...

08002f70 <_printf_i>:
 8002f70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f74:	7e0f      	ldrb	r7, [r1, #24]
 8002f76:	4691      	mov	r9, r2
 8002f78:	2f78      	cmp	r7, #120	; 0x78
 8002f7a:	4680      	mov	r8, r0
 8002f7c:	460c      	mov	r4, r1
 8002f7e:	469a      	mov	sl, r3
 8002f80:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002f82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002f86:	d807      	bhi.n	8002f98 <_printf_i+0x28>
 8002f88:	2f62      	cmp	r7, #98	; 0x62
 8002f8a:	d80a      	bhi.n	8002fa2 <_printf_i+0x32>
 8002f8c:	2f00      	cmp	r7, #0
 8002f8e:	f000 80d9 	beq.w	8003144 <_printf_i+0x1d4>
 8002f92:	2f58      	cmp	r7, #88	; 0x58
 8002f94:	f000 80a4 	beq.w	80030e0 <_printf_i+0x170>
 8002f98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002fa0:	e03a      	b.n	8003018 <_printf_i+0xa8>
 8002fa2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002fa6:	2b15      	cmp	r3, #21
 8002fa8:	d8f6      	bhi.n	8002f98 <_printf_i+0x28>
 8002faa:	a101      	add	r1, pc, #4	; (adr r1, 8002fb0 <_printf_i+0x40>)
 8002fac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002fb0:	08003009 	.word	0x08003009
 8002fb4:	0800301d 	.word	0x0800301d
 8002fb8:	08002f99 	.word	0x08002f99
 8002fbc:	08002f99 	.word	0x08002f99
 8002fc0:	08002f99 	.word	0x08002f99
 8002fc4:	08002f99 	.word	0x08002f99
 8002fc8:	0800301d 	.word	0x0800301d
 8002fcc:	08002f99 	.word	0x08002f99
 8002fd0:	08002f99 	.word	0x08002f99
 8002fd4:	08002f99 	.word	0x08002f99
 8002fd8:	08002f99 	.word	0x08002f99
 8002fdc:	0800312b 	.word	0x0800312b
 8002fe0:	0800304d 	.word	0x0800304d
 8002fe4:	0800310d 	.word	0x0800310d
 8002fe8:	08002f99 	.word	0x08002f99
 8002fec:	08002f99 	.word	0x08002f99
 8002ff0:	0800314d 	.word	0x0800314d
 8002ff4:	08002f99 	.word	0x08002f99
 8002ff8:	0800304d 	.word	0x0800304d
 8002ffc:	08002f99 	.word	0x08002f99
 8003000:	08002f99 	.word	0x08002f99
 8003004:	08003115 	.word	0x08003115
 8003008:	682b      	ldr	r3, [r5, #0]
 800300a:	1d1a      	adds	r2, r3, #4
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	602a      	str	r2, [r5, #0]
 8003010:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003014:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003018:	2301      	movs	r3, #1
 800301a:	e0a4      	b.n	8003166 <_printf_i+0x1f6>
 800301c:	6820      	ldr	r0, [r4, #0]
 800301e:	6829      	ldr	r1, [r5, #0]
 8003020:	0606      	lsls	r6, r0, #24
 8003022:	f101 0304 	add.w	r3, r1, #4
 8003026:	d50a      	bpl.n	800303e <_printf_i+0xce>
 8003028:	680e      	ldr	r6, [r1, #0]
 800302a:	602b      	str	r3, [r5, #0]
 800302c:	2e00      	cmp	r6, #0
 800302e:	da03      	bge.n	8003038 <_printf_i+0xc8>
 8003030:	232d      	movs	r3, #45	; 0x2d
 8003032:	4276      	negs	r6, r6
 8003034:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003038:	230a      	movs	r3, #10
 800303a:	485e      	ldr	r0, [pc, #376]	; (80031b4 <_printf_i+0x244>)
 800303c:	e019      	b.n	8003072 <_printf_i+0x102>
 800303e:	680e      	ldr	r6, [r1, #0]
 8003040:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003044:	602b      	str	r3, [r5, #0]
 8003046:	bf18      	it	ne
 8003048:	b236      	sxthne	r6, r6
 800304a:	e7ef      	b.n	800302c <_printf_i+0xbc>
 800304c:	682b      	ldr	r3, [r5, #0]
 800304e:	6820      	ldr	r0, [r4, #0]
 8003050:	1d19      	adds	r1, r3, #4
 8003052:	6029      	str	r1, [r5, #0]
 8003054:	0601      	lsls	r1, r0, #24
 8003056:	d501      	bpl.n	800305c <_printf_i+0xec>
 8003058:	681e      	ldr	r6, [r3, #0]
 800305a:	e002      	b.n	8003062 <_printf_i+0xf2>
 800305c:	0646      	lsls	r6, r0, #25
 800305e:	d5fb      	bpl.n	8003058 <_printf_i+0xe8>
 8003060:	881e      	ldrh	r6, [r3, #0]
 8003062:	2f6f      	cmp	r7, #111	; 0x6f
 8003064:	bf0c      	ite	eq
 8003066:	2308      	moveq	r3, #8
 8003068:	230a      	movne	r3, #10
 800306a:	4852      	ldr	r0, [pc, #328]	; (80031b4 <_printf_i+0x244>)
 800306c:	2100      	movs	r1, #0
 800306e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003072:	6865      	ldr	r5, [r4, #4]
 8003074:	2d00      	cmp	r5, #0
 8003076:	bfa8      	it	ge
 8003078:	6821      	ldrge	r1, [r4, #0]
 800307a:	60a5      	str	r5, [r4, #8]
 800307c:	bfa4      	itt	ge
 800307e:	f021 0104 	bicge.w	r1, r1, #4
 8003082:	6021      	strge	r1, [r4, #0]
 8003084:	b90e      	cbnz	r6, 800308a <_printf_i+0x11a>
 8003086:	2d00      	cmp	r5, #0
 8003088:	d04d      	beq.n	8003126 <_printf_i+0x1b6>
 800308a:	4615      	mov	r5, r2
 800308c:	fbb6 f1f3 	udiv	r1, r6, r3
 8003090:	fb03 6711 	mls	r7, r3, r1, r6
 8003094:	5dc7      	ldrb	r7, [r0, r7]
 8003096:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800309a:	4637      	mov	r7, r6
 800309c:	42bb      	cmp	r3, r7
 800309e:	460e      	mov	r6, r1
 80030a0:	d9f4      	bls.n	800308c <_printf_i+0x11c>
 80030a2:	2b08      	cmp	r3, #8
 80030a4:	d10b      	bne.n	80030be <_printf_i+0x14e>
 80030a6:	6823      	ldr	r3, [r4, #0]
 80030a8:	07de      	lsls	r6, r3, #31
 80030aa:	d508      	bpl.n	80030be <_printf_i+0x14e>
 80030ac:	6923      	ldr	r3, [r4, #16]
 80030ae:	6861      	ldr	r1, [r4, #4]
 80030b0:	4299      	cmp	r1, r3
 80030b2:	bfde      	ittt	le
 80030b4:	2330      	movle	r3, #48	; 0x30
 80030b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80030ba:	f105 35ff 	addle.w	r5, r5, #4294967295
 80030be:	1b52      	subs	r2, r2, r5
 80030c0:	6122      	str	r2, [r4, #16]
 80030c2:	464b      	mov	r3, r9
 80030c4:	4621      	mov	r1, r4
 80030c6:	4640      	mov	r0, r8
 80030c8:	f8cd a000 	str.w	sl, [sp]
 80030cc:	aa03      	add	r2, sp, #12
 80030ce:	f7ff fedf 	bl	8002e90 <_printf_common>
 80030d2:	3001      	adds	r0, #1
 80030d4:	d14c      	bne.n	8003170 <_printf_i+0x200>
 80030d6:	f04f 30ff 	mov.w	r0, #4294967295
 80030da:	b004      	add	sp, #16
 80030dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030e0:	4834      	ldr	r0, [pc, #208]	; (80031b4 <_printf_i+0x244>)
 80030e2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80030e6:	6829      	ldr	r1, [r5, #0]
 80030e8:	6823      	ldr	r3, [r4, #0]
 80030ea:	f851 6b04 	ldr.w	r6, [r1], #4
 80030ee:	6029      	str	r1, [r5, #0]
 80030f0:	061d      	lsls	r5, r3, #24
 80030f2:	d514      	bpl.n	800311e <_printf_i+0x1ae>
 80030f4:	07df      	lsls	r7, r3, #31
 80030f6:	bf44      	itt	mi
 80030f8:	f043 0320 	orrmi.w	r3, r3, #32
 80030fc:	6023      	strmi	r3, [r4, #0]
 80030fe:	b91e      	cbnz	r6, 8003108 <_printf_i+0x198>
 8003100:	6823      	ldr	r3, [r4, #0]
 8003102:	f023 0320 	bic.w	r3, r3, #32
 8003106:	6023      	str	r3, [r4, #0]
 8003108:	2310      	movs	r3, #16
 800310a:	e7af      	b.n	800306c <_printf_i+0xfc>
 800310c:	6823      	ldr	r3, [r4, #0]
 800310e:	f043 0320 	orr.w	r3, r3, #32
 8003112:	6023      	str	r3, [r4, #0]
 8003114:	2378      	movs	r3, #120	; 0x78
 8003116:	4828      	ldr	r0, [pc, #160]	; (80031b8 <_printf_i+0x248>)
 8003118:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800311c:	e7e3      	b.n	80030e6 <_printf_i+0x176>
 800311e:	0659      	lsls	r1, r3, #25
 8003120:	bf48      	it	mi
 8003122:	b2b6      	uxthmi	r6, r6
 8003124:	e7e6      	b.n	80030f4 <_printf_i+0x184>
 8003126:	4615      	mov	r5, r2
 8003128:	e7bb      	b.n	80030a2 <_printf_i+0x132>
 800312a:	682b      	ldr	r3, [r5, #0]
 800312c:	6826      	ldr	r6, [r4, #0]
 800312e:	1d18      	adds	r0, r3, #4
 8003130:	6961      	ldr	r1, [r4, #20]
 8003132:	6028      	str	r0, [r5, #0]
 8003134:	0635      	lsls	r5, r6, #24
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	d501      	bpl.n	800313e <_printf_i+0x1ce>
 800313a:	6019      	str	r1, [r3, #0]
 800313c:	e002      	b.n	8003144 <_printf_i+0x1d4>
 800313e:	0670      	lsls	r0, r6, #25
 8003140:	d5fb      	bpl.n	800313a <_printf_i+0x1ca>
 8003142:	8019      	strh	r1, [r3, #0]
 8003144:	2300      	movs	r3, #0
 8003146:	4615      	mov	r5, r2
 8003148:	6123      	str	r3, [r4, #16]
 800314a:	e7ba      	b.n	80030c2 <_printf_i+0x152>
 800314c:	682b      	ldr	r3, [r5, #0]
 800314e:	2100      	movs	r1, #0
 8003150:	1d1a      	adds	r2, r3, #4
 8003152:	602a      	str	r2, [r5, #0]
 8003154:	681d      	ldr	r5, [r3, #0]
 8003156:	6862      	ldr	r2, [r4, #4]
 8003158:	4628      	mov	r0, r5
 800315a:	f000 f82f 	bl	80031bc <memchr>
 800315e:	b108      	cbz	r0, 8003164 <_printf_i+0x1f4>
 8003160:	1b40      	subs	r0, r0, r5
 8003162:	6060      	str	r0, [r4, #4]
 8003164:	6863      	ldr	r3, [r4, #4]
 8003166:	6123      	str	r3, [r4, #16]
 8003168:	2300      	movs	r3, #0
 800316a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800316e:	e7a8      	b.n	80030c2 <_printf_i+0x152>
 8003170:	462a      	mov	r2, r5
 8003172:	4649      	mov	r1, r9
 8003174:	4640      	mov	r0, r8
 8003176:	6923      	ldr	r3, [r4, #16]
 8003178:	47d0      	blx	sl
 800317a:	3001      	adds	r0, #1
 800317c:	d0ab      	beq.n	80030d6 <_printf_i+0x166>
 800317e:	6823      	ldr	r3, [r4, #0]
 8003180:	079b      	lsls	r3, r3, #30
 8003182:	d413      	bmi.n	80031ac <_printf_i+0x23c>
 8003184:	68e0      	ldr	r0, [r4, #12]
 8003186:	9b03      	ldr	r3, [sp, #12]
 8003188:	4298      	cmp	r0, r3
 800318a:	bfb8      	it	lt
 800318c:	4618      	movlt	r0, r3
 800318e:	e7a4      	b.n	80030da <_printf_i+0x16a>
 8003190:	2301      	movs	r3, #1
 8003192:	4632      	mov	r2, r6
 8003194:	4649      	mov	r1, r9
 8003196:	4640      	mov	r0, r8
 8003198:	47d0      	blx	sl
 800319a:	3001      	adds	r0, #1
 800319c:	d09b      	beq.n	80030d6 <_printf_i+0x166>
 800319e:	3501      	adds	r5, #1
 80031a0:	68e3      	ldr	r3, [r4, #12]
 80031a2:	9903      	ldr	r1, [sp, #12]
 80031a4:	1a5b      	subs	r3, r3, r1
 80031a6:	42ab      	cmp	r3, r5
 80031a8:	dcf2      	bgt.n	8003190 <_printf_i+0x220>
 80031aa:	e7eb      	b.n	8003184 <_printf_i+0x214>
 80031ac:	2500      	movs	r5, #0
 80031ae:	f104 0619 	add.w	r6, r4, #25
 80031b2:	e7f5      	b.n	80031a0 <_printf_i+0x230>
 80031b4:	0800352d 	.word	0x0800352d
 80031b8:	0800353e 	.word	0x0800353e

080031bc <memchr>:
 80031bc:	4603      	mov	r3, r0
 80031be:	b510      	push	{r4, lr}
 80031c0:	b2c9      	uxtb	r1, r1
 80031c2:	4402      	add	r2, r0
 80031c4:	4293      	cmp	r3, r2
 80031c6:	4618      	mov	r0, r3
 80031c8:	d101      	bne.n	80031ce <memchr+0x12>
 80031ca:	2000      	movs	r0, #0
 80031cc:	e003      	b.n	80031d6 <memchr+0x1a>
 80031ce:	7804      	ldrb	r4, [r0, #0]
 80031d0:	3301      	adds	r3, #1
 80031d2:	428c      	cmp	r4, r1
 80031d4:	d1f6      	bne.n	80031c4 <memchr+0x8>
 80031d6:	bd10      	pop	{r4, pc}

080031d8 <memcpy>:
 80031d8:	440a      	add	r2, r1
 80031da:	4291      	cmp	r1, r2
 80031dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80031e0:	d100      	bne.n	80031e4 <memcpy+0xc>
 80031e2:	4770      	bx	lr
 80031e4:	b510      	push	{r4, lr}
 80031e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80031ea:	4291      	cmp	r1, r2
 80031ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80031f0:	d1f9      	bne.n	80031e6 <memcpy+0xe>
 80031f2:	bd10      	pop	{r4, pc}

080031f4 <memmove>:
 80031f4:	4288      	cmp	r0, r1
 80031f6:	b510      	push	{r4, lr}
 80031f8:	eb01 0402 	add.w	r4, r1, r2
 80031fc:	d902      	bls.n	8003204 <memmove+0x10>
 80031fe:	4284      	cmp	r4, r0
 8003200:	4623      	mov	r3, r4
 8003202:	d807      	bhi.n	8003214 <memmove+0x20>
 8003204:	1e43      	subs	r3, r0, #1
 8003206:	42a1      	cmp	r1, r4
 8003208:	d008      	beq.n	800321c <memmove+0x28>
 800320a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800320e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003212:	e7f8      	b.n	8003206 <memmove+0x12>
 8003214:	4601      	mov	r1, r0
 8003216:	4402      	add	r2, r0
 8003218:	428a      	cmp	r2, r1
 800321a:	d100      	bne.n	800321e <memmove+0x2a>
 800321c:	bd10      	pop	{r4, pc}
 800321e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003222:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003226:	e7f7      	b.n	8003218 <memmove+0x24>

08003228 <_free_r>:
 8003228:	b538      	push	{r3, r4, r5, lr}
 800322a:	4605      	mov	r5, r0
 800322c:	2900      	cmp	r1, #0
 800322e:	d040      	beq.n	80032b2 <_free_r+0x8a>
 8003230:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003234:	1f0c      	subs	r4, r1, #4
 8003236:	2b00      	cmp	r3, #0
 8003238:	bfb8      	it	lt
 800323a:	18e4      	addlt	r4, r4, r3
 800323c:	f000 f910 	bl	8003460 <__malloc_lock>
 8003240:	4a1c      	ldr	r2, [pc, #112]	; (80032b4 <_free_r+0x8c>)
 8003242:	6813      	ldr	r3, [r2, #0]
 8003244:	b933      	cbnz	r3, 8003254 <_free_r+0x2c>
 8003246:	6063      	str	r3, [r4, #4]
 8003248:	6014      	str	r4, [r2, #0]
 800324a:	4628      	mov	r0, r5
 800324c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003250:	f000 b90c 	b.w	800346c <__malloc_unlock>
 8003254:	42a3      	cmp	r3, r4
 8003256:	d908      	bls.n	800326a <_free_r+0x42>
 8003258:	6820      	ldr	r0, [r4, #0]
 800325a:	1821      	adds	r1, r4, r0
 800325c:	428b      	cmp	r3, r1
 800325e:	bf01      	itttt	eq
 8003260:	6819      	ldreq	r1, [r3, #0]
 8003262:	685b      	ldreq	r3, [r3, #4]
 8003264:	1809      	addeq	r1, r1, r0
 8003266:	6021      	streq	r1, [r4, #0]
 8003268:	e7ed      	b.n	8003246 <_free_r+0x1e>
 800326a:	461a      	mov	r2, r3
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	b10b      	cbz	r3, 8003274 <_free_r+0x4c>
 8003270:	42a3      	cmp	r3, r4
 8003272:	d9fa      	bls.n	800326a <_free_r+0x42>
 8003274:	6811      	ldr	r1, [r2, #0]
 8003276:	1850      	adds	r0, r2, r1
 8003278:	42a0      	cmp	r0, r4
 800327a:	d10b      	bne.n	8003294 <_free_r+0x6c>
 800327c:	6820      	ldr	r0, [r4, #0]
 800327e:	4401      	add	r1, r0
 8003280:	1850      	adds	r0, r2, r1
 8003282:	4283      	cmp	r3, r0
 8003284:	6011      	str	r1, [r2, #0]
 8003286:	d1e0      	bne.n	800324a <_free_r+0x22>
 8003288:	6818      	ldr	r0, [r3, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	4401      	add	r1, r0
 800328e:	6011      	str	r1, [r2, #0]
 8003290:	6053      	str	r3, [r2, #4]
 8003292:	e7da      	b.n	800324a <_free_r+0x22>
 8003294:	d902      	bls.n	800329c <_free_r+0x74>
 8003296:	230c      	movs	r3, #12
 8003298:	602b      	str	r3, [r5, #0]
 800329a:	e7d6      	b.n	800324a <_free_r+0x22>
 800329c:	6820      	ldr	r0, [r4, #0]
 800329e:	1821      	adds	r1, r4, r0
 80032a0:	428b      	cmp	r3, r1
 80032a2:	bf01      	itttt	eq
 80032a4:	6819      	ldreq	r1, [r3, #0]
 80032a6:	685b      	ldreq	r3, [r3, #4]
 80032a8:	1809      	addeq	r1, r1, r0
 80032aa:	6021      	streq	r1, [r4, #0]
 80032ac:	6063      	str	r3, [r4, #4]
 80032ae:	6054      	str	r4, [r2, #4]
 80032b0:	e7cb      	b.n	800324a <_free_r+0x22>
 80032b2:	bd38      	pop	{r3, r4, r5, pc}
 80032b4:	20000764 	.word	0x20000764

080032b8 <sbrk_aligned>:
 80032b8:	b570      	push	{r4, r5, r6, lr}
 80032ba:	4e0e      	ldr	r6, [pc, #56]	; (80032f4 <sbrk_aligned+0x3c>)
 80032bc:	460c      	mov	r4, r1
 80032be:	6831      	ldr	r1, [r6, #0]
 80032c0:	4605      	mov	r5, r0
 80032c2:	b911      	cbnz	r1, 80032ca <sbrk_aligned+0x12>
 80032c4:	f000 f8bc 	bl	8003440 <_sbrk_r>
 80032c8:	6030      	str	r0, [r6, #0]
 80032ca:	4621      	mov	r1, r4
 80032cc:	4628      	mov	r0, r5
 80032ce:	f000 f8b7 	bl	8003440 <_sbrk_r>
 80032d2:	1c43      	adds	r3, r0, #1
 80032d4:	d00a      	beq.n	80032ec <sbrk_aligned+0x34>
 80032d6:	1cc4      	adds	r4, r0, #3
 80032d8:	f024 0403 	bic.w	r4, r4, #3
 80032dc:	42a0      	cmp	r0, r4
 80032de:	d007      	beq.n	80032f0 <sbrk_aligned+0x38>
 80032e0:	1a21      	subs	r1, r4, r0
 80032e2:	4628      	mov	r0, r5
 80032e4:	f000 f8ac 	bl	8003440 <_sbrk_r>
 80032e8:	3001      	adds	r0, #1
 80032ea:	d101      	bne.n	80032f0 <sbrk_aligned+0x38>
 80032ec:	f04f 34ff 	mov.w	r4, #4294967295
 80032f0:	4620      	mov	r0, r4
 80032f2:	bd70      	pop	{r4, r5, r6, pc}
 80032f4:	20000768 	.word	0x20000768

080032f8 <_malloc_r>:
 80032f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032fc:	1ccd      	adds	r5, r1, #3
 80032fe:	f025 0503 	bic.w	r5, r5, #3
 8003302:	3508      	adds	r5, #8
 8003304:	2d0c      	cmp	r5, #12
 8003306:	bf38      	it	cc
 8003308:	250c      	movcc	r5, #12
 800330a:	2d00      	cmp	r5, #0
 800330c:	4607      	mov	r7, r0
 800330e:	db01      	blt.n	8003314 <_malloc_r+0x1c>
 8003310:	42a9      	cmp	r1, r5
 8003312:	d905      	bls.n	8003320 <_malloc_r+0x28>
 8003314:	230c      	movs	r3, #12
 8003316:	2600      	movs	r6, #0
 8003318:	603b      	str	r3, [r7, #0]
 800331a:	4630      	mov	r0, r6
 800331c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003320:	4e2e      	ldr	r6, [pc, #184]	; (80033dc <_malloc_r+0xe4>)
 8003322:	f000 f89d 	bl	8003460 <__malloc_lock>
 8003326:	6833      	ldr	r3, [r6, #0]
 8003328:	461c      	mov	r4, r3
 800332a:	bb34      	cbnz	r4, 800337a <_malloc_r+0x82>
 800332c:	4629      	mov	r1, r5
 800332e:	4638      	mov	r0, r7
 8003330:	f7ff ffc2 	bl	80032b8 <sbrk_aligned>
 8003334:	1c43      	adds	r3, r0, #1
 8003336:	4604      	mov	r4, r0
 8003338:	d14d      	bne.n	80033d6 <_malloc_r+0xde>
 800333a:	6834      	ldr	r4, [r6, #0]
 800333c:	4626      	mov	r6, r4
 800333e:	2e00      	cmp	r6, #0
 8003340:	d140      	bne.n	80033c4 <_malloc_r+0xcc>
 8003342:	6823      	ldr	r3, [r4, #0]
 8003344:	4631      	mov	r1, r6
 8003346:	4638      	mov	r0, r7
 8003348:	eb04 0803 	add.w	r8, r4, r3
 800334c:	f000 f878 	bl	8003440 <_sbrk_r>
 8003350:	4580      	cmp	r8, r0
 8003352:	d13a      	bne.n	80033ca <_malloc_r+0xd2>
 8003354:	6821      	ldr	r1, [r4, #0]
 8003356:	3503      	adds	r5, #3
 8003358:	1a6d      	subs	r5, r5, r1
 800335a:	f025 0503 	bic.w	r5, r5, #3
 800335e:	3508      	adds	r5, #8
 8003360:	2d0c      	cmp	r5, #12
 8003362:	bf38      	it	cc
 8003364:	250c      	movcc	r5, #12
 8003366:	4638      	mov	r0, r7
 8003368:	4629      	mov	r1, r5
 800336a:	f7ff ffa5 	bl	80032b8 <sbrk_aligned>
 800336e:	3001      	adds	r0, #1
 8003370:	d02b      	beq.n	80033ca <_malloc_r+0xd2>
 8003372:	6823      	ldr	r3, [r4, #0]
 8003374:	442b      	add	r3, r5
 8003376:	6023      	str	r3, [r4, #0]
 8003378:	e00e      	b.n	8003398 <_malloc_r+0xa0>
 800337a:	6822      	ldr	r2, [r4, #0]
 800337c:	1b52      	subs	r2, r2, r5
 800337e:	d41e      	bmi.n	80033be <_malloc_r+0xc6>
 8003380:	2a0b      	cmp	r2, #11
 8003382:	d916      	bls.n	80033b2 <_malloc_r+0xba>
 8003384:	1961      	adds	r1, r4, r5
 8003386:	42a3      	cmp	r3, r4
 8003388:	6025      	str	r5, [r4, #0]
 800338a:	bf18      	it	ne
 800338c:	6059      	strne	r1, [r3, #4]
 800338e:	6863      	ldr	r3, [r4, #4]
 8003390:	bf08      	it	eq
 8003392:	6031      	streq	r1, [r6, #0]
 8003394:	5162      	str	r2, [r4, r5]
 8003396:	604b      	str	r3, [r1, #4]
 8003398:	4638      	mov	r0, r7
 800339a:	f104 060b 	add.w	r6, r4, #11
 800339e:	f000 f865 	bl	800346c <__malloc_unlock>
 80033a2:	f026 0607 	bic.w	r6, r6, #7
 80033a6:	1d23      	adds	r3, r4, #4
 80033a8:	1af2      	subs	r2, r6, r3
 80033aa:	d0b6      	beq.n	800331a <_malloc_r+0x22>
 80033ac:	1b9b      	subs	r3, r3, r6
 80033ae:	50a3      	str	r3, [r4, r2]
 80033b0:	e7b3      	b.n	800331a <_malloc_r+0x22>
 80033b2:	6862      	ldr	r2, [r4, #4]
 80033b4:	42a3      	cmp	r3, r4
 80033b6:	bf0c      	ite	eq
 80033b8:	6032      	streq	r2, [r6, #0]
 80033ba:	605a      	strne	r2, [r3, #4]
 80033bc:	e7ec      	b.n	8003398 <_malloc_r+0xa0>
 80033be:	4623      	mov	r3, r4
 80033c0:	6864      	ldr	r4, [r4, #4]
 80033c2:	e7b2      	b.n	800332a <_malloc_r+0x32>
 80033c4:	4634      	mov	r4, r6
 80033c6:	6876      	ldr	r6, [r6, #4]
 80033c8:	e7b9      	b.n	800333e <_malloc_r+0x46>
 80033ca:	230c      	movs	r3, #12
 80033cc:	4638      	mov	r0, r7
 80033ce:	603b      	str	r3, [r7, #0]
 80033d0:	f000 f84c 	bl	800346c <__malloc_unlock>
 80033d4:	e7a1      	b.n	800331a <_malloc_r+0x22>
 80033d6:	6025      	str	r5, [r4, #0]
 80033d8:	e7de      	b.n	8003398 <_malloc_r+0xa0>
 80033da:	bf00      	nop
 80033dc:	20000764 	.word	0x20000764

080033e0 <_realloc_r>:
 80033e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033e4:	4680      	mov	r8, r0
 80033e6:	4614      	mov	r4, r2
 80033e8:	460e      	mov	r6, r1
 80033ea:	b921      	cbnz	r1, 80033f6 <_realloc_r+0x16>
 80033ec:	4611      	mov	r1, r2
 80033ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80033f2:	f7ff bf81 	b.w	80032f8 <_malloc_r>
 80033f6:	b92a      	cbnz	r2, 8003404 <_realloc_r+0x24>
 80033f8:	f7ff ff16 	bl	8003228 <_free_r>
 80033fc:	4625      	mov	r5, r4
 80033fe:	4628      	mov	r0, r5
 8003400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003404:	f000 f838 	bl	8003478 <_malloc_usable_size_r>
 8003408:	4284      	cmp	r4, r0
 800340a:	4607      	mov	r7, r0
 800340c:	d802      	bhi.n	8003414 <_realloc_r+0x34>
 800340e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003412:	d812      	bhi.n	800343a <_realloc_r+0x5a>
 8003414:	4621      	mov	r1, r4
 8003416:	4640      	mov	r0, r8
 8003418:	f7ff ff6e 	bl	80032f8 <_malloc_r>
 800341c:	4605      	mov	r5, r0
 800341e:	2800      	cmp	r0, #0
 8003420:	d0ed      	beq.n	80033fe <_realloc_r+0x1e>
 8003422:	42bc      	cmp	r4, r7
 8003424:	4622      	mov	r2, r4
 8003426:	4631      	mov	r1, r6
 8003428:	bf28      	it	cs
 800342a:	463a      	movcs	r2, r7
 800342c:	f7ff fed4 	bl	80031d8 <memcpy>
 8003430:	4631      	mov	r1, r6
 8003432:	4640      	mov	r0, r8
 8003434:	f7ff fef8 	bl	8003228 <_free_r>
 8003438:	e7e1      	b.n	80033fe <_realloc_r+0x1e>
 800343a:	4635      	mov	r5, r6
 800343c:	e7df      	b.n	80033fe <_realloc_r+0x1e>
	...

08003440 <_sbrk_r>:
 8003440:	b538      	push	{r3, r4, r5, lr}
 8003442:	2300      	movs	r3, #0
 8003444:	4d05      	ldr	r5, [pc, #20]	; (800345c <_sbrk_r+0x1c>)
 8003446:	4604      	mov	r4, r0
 8003448:	4608      	mov	r0, r1
 800344a:	602b      	str	r3, [r5, #0]
 800344c:	f7fd f96c 	bl	8000728 <_sbrk>
 8003450:	1c43      	adds	r3, r0, #1
 8003452:	d102      	bne.n	800345a <_sbrk_r+0x1a>
 8003454:	682b      	ldr	r3, [r5, #0]
 8003456:	b103      	cbz	r3, 800345a <_sbrk_r+0x1a>
 8003458:	6023      	str	r3, [r4, #0]
 800345a:	bd38      	pop	{r3, r4, r5, pc}
 800345c:	2000076c 	.word	0x2000076c

08003460 <__malloc_lock>:
 8003460:	4801      	ldr	r0, [pc, #4]	; (8003468 <__malloc_lock+0x8>)
 8003462:	f000 b811 	b.w	8003488 <__retarget_lock_acquire_recursive>
 8003466:	bf00      	nop
 8003468:	20000770 	.word	0x20000770

0800346c <__malloc_unlock>:
 800346c:	4801      	ldr	r0, [pc, #4]	; (8003474 <__malloc_unlock+0x8>)
 800346e:	f000 b80c 	b.w	800348a <__retarget_lock_release_recursive>
 8003472:	bf00      	nop
 8003474:	20000770 	.word	0x20000770

08003478 <_malloc_usable_size_r>:
 8003478:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800347c:	1f18      	subs	r0, r3, #4
 800347e:	2b00      	cmp	r3, #0
 8003480:	bfbc      	itt	lt
 8003482:	580b      	ldrlt	r3, [r1, r0]
 8003484:	18c0      	addlt	r0, r0, r3
 8003486:	4770      	bx	lr

08003488 <__retarget_lock_acquire_recursive>:
 8003488:	4770      	bx	lr

0800348a <__retarget_lock_release_recursive>:
 800348a:	4770      	bx	lr

0800348c <_init>:
 800348c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800348e:	bf00      	nop
 8003490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003492:	bc08      	pop	{r3}
 8003494:	469e      	mov	lr, r3
 8003496:	4770      	bx	lr

08003498 <_fini>:
 8003498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800349a:	bf00      	nop
 800349c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800349e:	bc08      	pop	{r3}
 80034a0:	469e      	mov	lr, r3
 80034a2:	4770      	bx	lr
